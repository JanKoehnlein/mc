-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunval',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b27880e0-c9d8-4f3f-9d90-b291203c9702",
	112,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'escher::mcmc::afunval');
INSERT INTO DIM_DIA
	VALUES ("b27880e0-c9d8-4f3f-9d90-b291203c9702",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("98ea2dd7-a6cf-4833-b47e-b12d3a2e058e",
	"00000000-0000-0000-0000-000000000000",
	'val_translate',
	'',
	'//====================================================================
//
// $RCSfile: q.val.translate.arc,v $
//
//
//====================================================================
//
// These functions set up the implementation of the values (V_VAL on
// model of OAL).
//
//==================================================================== 
//
//
// Translate "leaf" values first.
::val_literal_boolean_values();
::val_literal_integer_values();
::val_literal_real_values();
::val_literal_string_values();
::val_literal_enumerations();
::val_constant_values();
::val_transient_values();
::val_instance_reference_values();
::val_inst_ref_set_values();
::val_selection_test_values();
::val_event_values();
::val_parameter_values();
// The following may be recursed.
::val_attribute_values();
::val_member_values();
::val_array_element_references();
::val_array_length_values();
::val_unary_op_values();
::val_binary_op_values();
// V_PARs depend upon values being populated.
::val_actual_parameters();
// These use V_PARs.
::val_message_values();
::val_bridge_values();
::val_transform_values();
::val_synch_service_values();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("98ea2dd7-a6cf-4833-b47e-b12d3a2e058e",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ffa38c20-f86a-43bc-862e-9b4590a2f136",
	"00000000-0000-0000-0000-000000000000",
	'gen_value',
	'',
	'//
//--------------------------------------------------------------------
// Percolate the values from the "leaves" up into the combined
// expressions by recursively drilling down.
//--------------------------------------------------------------------
v_val = param.v_val;
select one v_mvl related by v_val->V_MVL[R801];
if ( not_empty v_mvl )
  ::val_member_value( v_mvl:v_mvl );
else
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    ::val_attribute_value( v_avl:v_avl );
  else
    select one v_aer related by v_val->V_AER[R801];
    if ( not_empty v_aer )
      ::val_array_element_reference( v_aer:v_aer );
    else
      select one v_alv related by v_val->V_ALV[R801];
      if ( not_empty v_alv )
        ::val_array_length_value( v_alv:v_alv );
      else
        select one v_uny related by v_val->V_UNY[R801];
        if ( not_empty v_uny )
          ::val_unary_op_value( v_uny:v_uny );
        else
          select one v_bin related by v_val->V_BIN[R801];
          if ( not_empty v_bin )
            ::val_binary_op_value( v_bin:v_bin );
          else
            select one v_trv related by v_val->V_TRV[R801];
            if ( not_empty v_trv )
              ::val_transform_value( v_trv:v_trv );
            else
              select one v_msv related by v_val->V_MSV[R801];
              if ( not_empty v_msv )
                ::val_message_value( v_msv:v_msv );
              else
                select one v_brv related by v_val->V_BRV[R801];
                if ( not_empty v_brv )
                  ::val_bridge_value( v_brv:v_brv );
                else
                  select one v_fnv related by v_val->V_FNV[R801];
                  if ( not_empty v_fnv )
                    ::val_synch_service_value( v_fnv:v_fnv );
                  else
                    T::print(s:"ERROR:  Recursive V_VAL resolution issue.");
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fdc5a843-12f0-46c2-912d-ec9e224af42b",
	"ffa38c20-f86a-43bc-862e-9b4590a2f136",
	'v_val',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5400d269-ee31-4742-ac70-8532512a854c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("ffa38c20-f86a-43bc-862e-9b4590a2f136",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("609bdab2-3228-4ea6-9168-2fcc678286c3",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_boolean_values',
	'',
	'//
select any te_target from instances of TE_TARGET;
select many v_lbos from instances of V_LBO;
for each v_lbo in v_lbos
  select one te_val related by v_lbo->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lbo.Value;
  te_val.buffer = v_lbo.Value;
  if ( "Java" == te_target.language )
    te_val.buffer = T::l(s:v_lbo.Value);
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("609bdab2-3228-4ea6-9168-2fcc678286c3",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("46f0c802-98f1-4309-abf5-b357d6d5f749",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_string_values',
	'',
	'//
select any te_string from instances of TE_STRING;
select many v_lsts from instances of V_LST;
for each v_lst in v_lsts
  select one te_val related by v_lst->V_VAL[R801]->TE_VAL[R2040];
  // s = T::t( s:v_lst.Value );
  s = v_lst.Value;
  ::oal( s:"s = Escher_strcpy( s, T_t( v_lst->Value ) ); // Ccode" );
  // if ( strstr( s, "({" ) )
  ::oal( s:"if ( strstr( s, ({ ) ) { // Ccode" );
  if ( "({" == s )
    te_val.buffer = s;
  else
    te_val.buffer = ( "&quot;" + v_lst.Value ) + "&quot;";
    ::oal( s:" // Ccode" );
  end if;
  te_val.OAL = ( "" + v_lst.Value ) + "";
  te_val.dimensions = 1;
  te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
  //TODO assign dimension
  // java same
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("46f0c802-98f1-4309-abf5-b357d6d5f749",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("80bc551d-980c-4331-ad6b-c42f453ef4ba",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_integer_values',
	'',
	'//
select many v_lins from instances of V_LIN;
for each v_lin in v_lins
  select one te_val related by v_lin->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lin.Value;
  te_val.buffer = v_lin.Value;
  // java same
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("80bc551d-980c-4331-ad6b-c42f453ef4ba",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04f0a3d0-37d0-4189-bce2-0482dd933364",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_real_values',
	'',
	'//
select many v_lrls from instances of V_LRL;
for each v_lrl in v_lrls
  select one te_val related by v_lrl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lrl.Value;
  te_val.buffer = v_lrl.Value + "f";
  // java same
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("04f0a3d0-37d0-4189-bce2-0482dd933364",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ba1bdccb-06d4-44b3-a183-cad7385b26e2",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_enumerations',
	'',
	'//
select any te_target from instances of TE_TARGET;
select many v_lens from instances of V_LEN;
for each v_len in v_lens
  select one te_val related by v_len->V_VAL[R801]->TE_VAL[R2040];
  select one te_enum related by v_len->S_ENUM[R824]->TE_ENUM[R2027];
  te_val.OAL = te_enum.Name;
  te_val.buffer = te_enum.GeneratedName;
  if ( "Java" == te_target.language )
    select one v_val related by v_len->V_VAL[R801];
    select one s_enum related by v_len->S_ENUM[R824];
    select any s_dt from instances of S_DT where ( selected.DT_ID == v_val.DT_ID );
    capital_name = T::c(s:s_dt.Name);
    dt_name = T::r(s:capital_name);
    enum_name = T::underscore(s:s_enum.Name);
    te_val.buffer = dt_name + "_c." + enum_name;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("ba1bdccb-06d4-44b3-a183-cad7385b26e2",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8a0ac09f-84c9-43ed-af13-baa18069eec2",
	"00000000-0000-0000-0000-000000000000",
	'val_constant_values',
	'',
	'//
select many v_scvs from instances of V_SCV;
for each v_scv in v_scvs
  select one te_val related by v_scv->V_VAL[R801]->TE_VAL[R2040];
  select one cnst_syc related by v_scv->CNST_SYC[R850];
  select one cnst_lsc related by cnst_syc->CNST_LFSC[R1502]->CNST_LSC[R1503];
  select one te_dt related by cnst_syc->S_DT[R1500]->TE_DT[R2021];
  te_val.OAL = cnst_syc.Name;
  te_val.buffer = cnst_lsc.Value;
  if ( 4 == te_dt.Core_Typ )
    select any te_string from instances of TE_STRING;
    te_val.buffer = ( "&quot;" + cnst_lsc.Value ) + "&quot;";
    ::oal( s:" // Ccode" );
    te_val.dimensions = 1;
    te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
    //TODO assign dimension
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("8a0ac09f-84c9-43ed-af13-baa18069eec2",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1af72208-d201-46a5-900a-0f8ddb15d1bf",
	"00000000-0000-0000-0000-000000000000",
	'val_transient_values',
	'',
	'//
select many v_tvls from instances of V_TVL;
for each v_tvl in v_tvls
  select one v_var related by v_tvl->V_VAR[R805];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_val related by v_tvl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
  te_val.dimensions = te_var.dimensions;
  te_val.array_spec = te_var.array_spec;
  select one te_dim related by te_var->TE_DIM[R2057];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("1af72208-d201-46a5-900a-0f8ddb15d1bf",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5ea112e1-c6ad-46ff-8fcb-edfb2dd1b7d9",
	"00000000-0000-0000-0000-000000000000",
	'val_actual_parameters',
	'',
	'//
select many v_pars from instances of V_PAR;
for each v_par in v_pars
  select one te_par related by v_par->TE_PAR[R2063];
  select one v_val related by v_par->V_VAL[R800];
  select one te_val related by v_val->TE_VAL[R2040];
  select one te_dt related by v_val->S_DT[R820]->TE_DT[R2021];
  te_val.OAL = ( te_par.Name + ":" ) + te_val.OAL;
  if ( 10 == te_dt.Core_Typ )
    // Cast event types to the base event type for passing (to timers).
    te_val.buffer = ( "(" + te_dt.ExtName ) + ( ")" + te_val.buffer );
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("5ea112e1-c6ad-46ff-8fcb-edfb2dd1b7d9",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("925c7ff7-a0ba-4a74-bae7-2269d95099c4",
	"00000000-0000-0000-0000-000000000000",
	'val_attribute_values',
	'',
	'//
select many v_avls from instances of V_AVL;
for each v_avl in v_avls
  ::val_attribute_value( v_avl:v_avl );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("925c7ff7-a0ba-4a74-bae7-2269d95099c4",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3d452fc3-488b-49ef-94a8-27d46fdfe6f9",
	"00000000-0000-0000-0000-000000000000",
	'val_attribute_value',
	'',
	'//
v_avl = param.v_avl;
select one v_val related by v_avl->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_avl->V_VAL[R807];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_var related by v_avl->V_VAL[R807]->V_IRF[R801]->V_VAR[R808]->TE_VAR[R2039];
  select one o_attr related by v_avl->O_ATTR[R806];
  select one te_attr related by o_attr->TE_ATTR[R2033];
  if ( not_empty te_attr )
    root = "";
    if ( empty te_var )
      te_val.OAL = ( root_te_val.OAL + "." ) + te_attr.Name;
      te_val.buffer = ( root_te_val.buffer + "->" ) + te_attr.GeneratedName;
      root = root_te_val.buffer;
    else
      te_val.OAL = ( te_var.OAL + "." ) + te_attr.Name;
      te_val.buffer = ( te_var.buffer + "->" ) + te_attr.GeneratedName;
      root = te_var.buffer;
    end if;
    te_val.dimensions = te_attr.dimensions;
    te_val.array_spec = te_attr.array_spec;
    select one te_dim related by te_attr->TE_DIM[R2055];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    else
          end if;
    // Maybe attribute value is actually derived.
    select one o_dbattr related by o_attr->O_BATTR[R106]->O_DBATTR[R107];
    if ( not_empty o_dbattr )
      select one act_ai related by v_val->ACT_AI[R689];
      if ( empty act_ai )
        // Only do this if we are not assigning inside the DAB OAL body.
        select one te_aba related by o_dbattr->TE_DBATTR[R2026]->TE_ABA[R2010];
        te_val.buffer = ( te_aba.GeneratedName + "( " ) + ( root + " )" );
        te_val.dimensions = te_aba.dimensions;
        te_val.array_spec = te_aba.array_spec;
        select one te_dim related by te_aba->TE_DIM[R2058];
        if ( not_empty te_dim )
          relate te_val to te_dim across R2079;
        else
                  end if;
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d6db5a08-ac06-4b1e-aa12-069b40ea79a7",
	"3d452fc3-488b-49ef-94a8-27d46fdfe6f9",
	'v_avl',
	"71ed37d1-359a-4941-b904-f5450eb45d4e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("71ed37d1-359a-4941-b904-f5450eb45d4e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("3d452fc3-488b-49ef-94a8-27d46fdfe6f9",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4d2a87e6-cb4b-47de-9393-af33c52ed405",
	"00000000-0000-0000-0000-000000000000",
	'val_member_values',
	'',
	'//
select many v_mvls from instances of V_MVL;
for each v_mvl in v_mvls
  ::val_member_value( v_mvl:v_mvl );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("4d2a87e6-cb4b-47de-9393-af33c52ed405",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e332eecd-996f-4b86-b82b-c6678dd7f2ff",
	"00000000-0000-0000-0000-000000000000",
	'val_member_value',
	'',
	'//
v_mvl = param.v_mvl;
select one te_val related by v_mvl->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_mvl->V_VAL[R837];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_mbr related by v_mvl->S_MBR[R836]->TE_MBR[R2047];
  te_val.dimensions = te_mbr.dimensions;
  te_val.array_spec = te_mbr.array_spec;
  select one te_dim related by te_mbr->TE_DIM[R2059];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  te_val.OAL = ( root_te_val.OAL + "." ) + te_mbr.Name;
  te_val.buffer = ( root_te_val.buffer + "." ) + te_mbr.GeneratedName;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("7f903273-c446-4588-b8e5-baae9b8506ad",
	"e332eecd-996f-4b86-b82b-c6678dd7f2ff",
	'v_mvl',
	"e023df9a-7028-4de9-9907-becb527ba8e2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e023df9a-7028-4de9-9907-becb527ba8e2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Member Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("e332eecd-996f-4b86-b82b-c6678dd7f2ff",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0be2d2ee-3159-498c-b048-26ff98cad86c",
	"00000000-0000-0000-0000-000000000000",
	'val_instance_reference_values',
	'',
	'//
unique_num = 0;
select many v_irfs from instances of V_IRF;
for each v_irf in v_irfs
  select one te_val related by v_irf->V_VAL[R801]->TE_VAL[R2040];
  select one te_var related by v_irf->V_VAR[R808]->TE_VAR[R2039];
  if ( not_empty te_var )
    te_val.OAL = te_var.OAL;
    te_val.buffer = te_var.buffer;
  else
    T::print(s:"CDS:  Understand why we do not have V_VAR here.");
    te_val.buffer = "v_irf_" + T::s(i:unique_num);
    unique_num = unique_num + 1;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("0be2d2ee-3159-498c-b048-26ff98cad86c",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a3c2c399-022f-4aa7-81b4-dc9d90bd69e8",
	"00000000-0000-0000-0000-000000000000",
	'val_selection_test_values',
	'',
	'//
select many v_slrs from instances of V_SLR;
for each v_slr in v_slrs
  select one te_val related by v_slr->V_VAL[R801]->TE_VAL[R2040];
  te_val.buffer = "selected";
  te_val.OAL = "SELECTED";
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("a3c2c399-022f-4aa7-81b4-dc9d90bd69e8",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f98f12c0-785d-4450-b2e6-8e5c1cfadfd4",
	"00000000-0000-0000-0000-000000000000",
	'val_inst_ref_set_values',
	'',
	'//
select many v_isrs from instances of V_ISR;
for each v_isr in v_isrs
  select one te_var related by v_isr->V_VAR[R809]->TE_VAR[R2039];
  select one te_val related by v_isr->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("f98f12c0-785d-4450-b2e6-8e5c1cfadfd4",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9b63b72b-c20a-4452-9c80-b363d774201f",
	"00000000-0000-0000-0000-000000000000",
	'val_event_values',
	'',
	'//
select many v_edvs from instances of V_EDV;
for each v_edv in v_edvs
  select one te_val related by v_edv->V_VAL[R801]->TE_VAL[R2040];
  // If there are more than one transition into the state, there
  // may be more than one event parameter reference.  Select
  // any of them; they have the same names.
  select any te_parm related by v_edv->V_EPR[R834]->SM_EVTDI[R846]->TE_PARM[R2031];
  if ( empty te_parm )
    select any te_parm related by v_edv->V_EPR[R834]->C_PP[R847]->TE_PARM[R2048];
  else
    // Mark the event as used.
    select one te_evt related by te_parm->SM_EVTDI[R2031]->SM_EVT[R532]->TE_EVT[R2036];
    if ( not_empty te_evt )
      te_evt.UsedCount = te_evt.UsedCount + 1;
      te_evt.Used = true;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = "rcvd_evt->" + te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("9b63b72b-c20a-4452-9c80-b363d774201f",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2e4ff440-31c4-4083-8d09-5c3a00d36508",
	"00000000-0000-0000-0000-000000000000",
	'val_parameter_values',
	'',
	'//
select many v_pvls from instances of V_PVL;
for each v_pvl in v_pvls
  select one te_val related by v_pvl->V_VAL[R801]->TE_VAL[R2040];
  select one te_parm related by v_pvl->O_TPARM[R833]->TE_PARM[R2029];
  if ( empty te_parm )
    select one te_parm related by v_pvl->C_PP[R843]->TE_PARM[R2048];
    if ( empty te_parm )
      select one te_parm related by v_pvl->S_SPARM[R832]->TE_PARM[R2030];
      if ( empty te_parm )
        select one te_parm related by v_pvl->S_BPARM[R831]->TE_PARM[R2028];
        if ( empty te_parm )
          T::print(s:"CDS:  Understand why we do not have V_PVL related parameter here.");
        end if;
      end if;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  if ( 1 == te_parm.By_Ref )
    te_val.buffer = ( "(*" + te_parm.GeneratedName ) + ")";
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("2e4ff440-31c4-4083-8d09-5c3a00d36508",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9cd9eed9-3126-4dc5-8c48-0bb7110f78ff",
	"00000000-0000-0000-0000-000000000000",
	'val_unary_op_values',
	'',
	'//
select many v_unys from instances of V_UNY;
for each v_uny in v_unys
  ::val_unary_op_value( v_uny:v_uny );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("9cd9eed9-3126-4dc5-8c48-0bb7110f78ff",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("64e5f57b-45a8-4bec-86cc-132405c90ae8",
	"00000000-0000-0000-0000-000000000000",
	'val_unary_op_value',
	'',
	'//
v_uny = param.v_uny;
select one te_val related by v_uny->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_uny->V_VAL[R804];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  // Remove blanks and make lower case.
  op = T::r(s:v_uny.Operator);
  op = T::l(s:op);
  select any te_set from instances of TE_SET;
  select one v_irf related by root_v_val->V_IRF[R801];
  select one v_isr related by root_v_val->V_ISR[R801];
  if ( not_empty v_irf )
    if ( op == "not_empty" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    elif ( op == "empty" )
      te_val.buffer = ( "( 0 == " + root_te_val.buffer ) + " )";
    elif ( op == "cardinality" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  elif ( not_empty v_isr )
    if ( op == "not_empty" )
      te_val.buffer = ( ( "( ! " + te_set.emptiness ) + ( "( " + root_te_val.buffer ) ) + " ) )";
    elif ( op == "empty" )
      te_val.buffer = ( ( te_set.emptiness + "( " ) + ( root_te_val.buffer + " )" ) );
    elif ( op == "cardinality" )
      te_val.buffer = ( ( te_set.module + te_set.element_count ) + ( "( " + root_te_val.buffer ) ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  else
    if ( op == "not" )
      te_val.buffer = "!" + root_te_val.buffer;
    else
      te_val.buffer = op + root_te_val.buffer;
    end if;
  end if;
  te_val.OAL = ( op + " " ) + root_te_val.OAL;
  // future support for vector arithmetic goes here
  te_val.dimensions = root_te_val.dimensions;
  te_val.array_spec = root_te_val.array_spec;
  select one te_dim related by root_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("9219d153-c9f3-4cea-8c65-e22c3b4c1d76",
	"64e5f57b-45a8-4bec-86cc-132405c90ae8",
	'v_uny',
	"59a775c7-8153-4a74-9471-99ef6c7254a0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("59a775c7-8153-4a74-9471-99ef6c7254a0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("64e5f57b-45a8-4bec-86cc-132405c90ae8",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3082d424-a203-4f93-a4b8-3140cd3a8521",
	"00000000-0000-0000-0000-000000000000",
	'val_binary_op_values',
	'',
	'//
select many v_bins from instances of V_BIN;
for each v_bin in v_bins
  ::val_binary_op_value( v_bin:v_bin );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("3082d424-a203-4f93-a4b8-3140cd3a8521",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("83b3aa76-8ef9-4197-a4b5-973137b3163b",
	"00000000-0000-0000-0000-000000000000",
	'val_binary_op_value',
	'',
	'//
v_bin = param.v_bin;
select one te_val related by v_bin->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one l_v_val related by v_bin->V_VAL[R802];
  select one l_te_val related by l_v_val->TE_VAL[R2040];
  if ( "" == l_te_val.buffer )
    ::gen_value( v_val:l_v_val );
  end if;
  select one r_v_val related by v_bin->V_VAL[R803];
  select one r_te_val related by r_v_val->TE_VAL[R2040];
  if ( "" == r_te_val.buffer )
    ::gen_value( v_val:r_v_val );
  end if;
  select one l_te_dt related by l_v_val->S_DT[R820]->TE_DT[R2021];
  select one r_te_dt related by r_v_val->S_DT[R820]->TE_DT[R2021];
  if ( ( 4 == l_te_dt.Core_Typ ) or ( 4 == r_te_dt.Core_Typ ) )
    // string
    select any te_string from instances of TE_STRING;
    select any te_instance from instances of TE_INSTANCE;
    if ( "+" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( ( te_instance.module + te_string.stradd ) + ( "( " + l_te_val.buffer ) ) + ( ", " + r_te_val.buffer ) ) + " )";
    else
      te_val.buffer = ( ( ( "( " + te_instance.module ) + ( te_string.strcmp + "( " ) ) + ( ( l_te_val.buffer + ", " ) + ( r_te_val.buffer + " ) " ) ) ) + ( v_bin.Operator + " 0 )" );
    end if;
  elif ( ( 9 == l_te_dt.Core_Typ ) and ( 9 == r_te_dt.Core_Typ ) )
    if ( "+" == T::r(s:v_bin.Operator) )
      select any te_set from instances of TE_SET;
      te_val.buffer = ( ( ( te_set.module + te_set.setadd ) + ( "( " + l_te_val.buffer ) ) + ( ", " + r_te_val.buffer ) ) + " )";
    end if;
  else
    select any te_target from instances of TE_TARGET;
    if ( "and" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " && " + r_te_val.buffer ) ) + " )";
    elif ( "or" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " || " + r_te_val.buffer ) ) + " )";
    elif ( ( ( ( "==" == T::r(s:v_bin.Operator) ) or ( "!=" == T::r(s:v_bin.Operator) ) ) and ( "C" == te_target.language ) ) and ( l_te_val.dimensions != 0 ) )
      element_count = 0;
      select one r_te_dim related by r_te_val->TE_DIM[R2079];
      if ( not_empty r_te_dim )
        element_count = r_te_dim.elementCount;
      end if;
      te_val.buffer = ( ( ( "( memcmp( " + l_te_val.buffer ) + ( ", " + r_te_val.buffer ) ) + ( ( ", sizeof(" + l_te_val.buffer ) + ( "[0]) * " + T::s(i:element_count) ) ) ) + ( ( ") " + v_bin.Operator ) + " 0 )" );
    else
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.buffer ) + " )" );
    end if;
  end if;
  // future support for vector arithmetic goes here
  te_val.dimensions = r_te_val.dimensions;
  te_val.array_spec = r_te_val.array_spec;
  select one te_dim related by r_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  te_val.OAL = ( ( "( " + l_te_val.OAL ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.OAL ) + " )" );
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("b2e521b7-da86-491d-ab4c-37e676c6e4e9",
	"83b3aa76-8ef9-4197-a4b5-973137b3163b",
	'v_bin',
	"146d5fb3-fcd3-4deb-a49c-f516ef703827",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("146d5fb3-fcd3-4deb-a49c-f516ef703827",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Binary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("83b3aa76-8ef9-4197-a4b5-973137b3163b",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("30976913-de53-40eb-a0cf-95977ba511ac",
	"00000000-0000-0000-0000-000000000000",
	'val_message_values',
	'',
	'//
select many v_msvs from instances of V_MSV;
for each v_msv in v_msvs
  ::val_message_value( v_msv:v_msv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("30976913-de53-40eb-a0cf-95977ba511ac",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7c8ca420-a7d5-44f0-b5ee-249a015dc000",
	"00000000-0000-0000-0000-000000000000",
	'val_message_value',
	'',
	'//
v_msv = param.v_msv;
select one v_val related by v_msv->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one te_mact related by v_msv->SPR_PEP[R841]->SPR_PO[R4503]->TE_MACT[R2050];
  if ( empty te_mact )
    select one te_mact related by v_msv->SPR_REP[R845]->SPR_RO[R4502]->TE_MACT[R2052];
  end if;
  select many v_pars related by v_msv->V_PAR[R842];
  select one te_aba related by te_mact->TE_ABA[R2010];
  select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
  sretvar = ( ( "vmsv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
  r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, te_blk:te_blk, sretvar:sretvar, is_statement:false );
  te_val.buffer = r;
  te_val.OAL = ( ( te_mact.PortName + "::" ) + ( te_mact.MessageName + "(" ) ) + ( te_mact.OALParamBuffer + ")" );
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5ee38df6-a63f-4f9a-af85-68c5eb9e976f",
	"7c8ca420-a7d5-44f0-b5ee-249a015dc000",
	'v_msv',
	"5d3edb98-7267-4f8f-8a43-a03062f612ef",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5d3edb98-7267-4f8f-8a43-a03062f612ef",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Message Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("7c8ca420-a7d5-44f0-b5ee-249a015dc000",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2ce5ef7c-637d-4ddb-99f5-be805ad4dba8",
	"00000000-0000-0000-0000-000000000000",
	'val_bridge_values',
	'',
	'//
select many v_brvs from instances of V_BRV;
for each v_brv in v_brvs
  ::val_bridge_value( v_brv:v_brv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("2ce5ef7c-637d-4ddb-99f5-be805ad4dba8",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cbb8d646-d553-4dff-a893-065ee0c7c5ca",
	"00000000-0000-0000-0000-000000000000",
	'val_bridge_value',
	'',
	'//
v_brv = param.v_brv;
select one te_brg related by v_brv->S_BRG[R828]->TE_BRG[R2025];
if ( not_empty te_brg )
  select any te_sys from instances of TE_SYS;
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_brv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  if ( "" == te_val.buffer )
    select many v_pars related by v_brv->V_PAR[R810];
    select one te_aba related by te_brg->TE_ABA[R2010];
    select one te_ee related by v_brv->S_BRG[R828]->S_EE[R19]->TE_EE[R2020];
    te_ee.Included = true;
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    params_OAL = te_parm.OALParamBuffer;
    te_val.OAL = ( ( te_brg.EEkeyletters + "::" ) + ( te_brg.Name + "(" ) ) + ( params_OAL + ")" );
    if ( "c_t *" == te_aba.ReturnDataType )
      if ( not te_sys.InstanceLoading )
        select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
        sretvar = ( ( "vbrv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
        te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
        if ( "" == parameters )
          parameters = sretvar;
        else
          parameters = ( ( sretvar + ", " ) + parameters );
        end if;
      end if;
    end if;
    if ( "C++" == te_target.language )
      if ( "TIM" == te_brg.EEkeyletters )
        te_val.buffer = ( "thismodule->tim->" + te_brg.GeneratedName ) + "(";
      else
        select one te_c related by te_ee->TE_C[R2085];
        if ( not_empty te_c )
          if ( "" == parameters )
            parameters = "thismodule";
          else
            parameters = "thismodule, " + parameters;
          end if;
        end if;
      end if;
    else
      te_val.buffer = ( te_aba.scope + te_brg.GeneratedName ) + "(";
    end if;
    if ( "" != parameters )
      te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
    end if;
    te_val.buffer = te_val.buffer + ")";
    te_val.dimensions = te_aba.dimensions;
    te_val.array_spec = te_aba.array_spec;
    select one te_dim related by te_aba->TE_DIM[R2058];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    else
          end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1a304ced-97c4-44de-977b-e6279d741dee",
	"cbb8d646-d553-4dff-a893-065ee0c7c5ca",
	'v_brv',
	"cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("cbb8d646-d553-4dff-a893-065ee0c7c5ca",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("110a2da3-f942-4777-ad7f-61ff5004d765",
	"00000000-0000-0000-0000-000000000000",
	'val_transform_values',
	'',
	'//
select many v_trvs from instances of V_TRV;
for each v_trv in v_trvs
  ::val_transform_value( v_trv:v_trv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("110a2da3-f942-4777-ad7f-61ff5004d765",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d655c501-3d97-4819-a342-fa8cc2d927ed",
	"00000000-0000-0000-0000-000000000000",
	'val_transform_value',
	'',
	'//
v_trv = param.v_trv;
select one te_tfr related by v_trv->O_TFR[R829]->TE_TFR[R2024];
if ( not_empty te_tfr )
  select any te_sys from instances of TE_SYS;
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_trv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  if ( "" == te_val.buffer )
    select many v_pars related by v_trv->V_PAR[R811];
    select one te_aba related by te_tfr->TE_ABA[R2010];
    te_val.buffer = te_tfr.GeneratedName + "(";
    if ( te_tfr.Instance_Based == 1 )
      select one te_var related by v_trv->V_VAR[R830]->TE_VAR[R2039];
      if ( not_empty te_var )
        if ( "C++" == te_target.language )
          te_val.buffer = ( te_var.buffer + "->" ) + te_val.buffer;
        end if;
        te_val.buffer = te_val.buffer + te_var.buffer;
        te_val.OAL = te_var.OAL + ".";
      else
        // no variable, must be selection (selected reference)
        if ( "C++" == te_target.language )
          te_val.buffer = "selected->" + te_val.buffer;
        end if;
        te_val.buffer = te_val.buffer + "selected";
        te_val.OAL = "SELECTED.";
      end if;
    else
      if ( "C++" == te_target.language )
        select one te_class related by v_trv->O_TFR[R829]->O_OBJ[R115]->TE_CLASS[R2019];
        te_val.buffer = ( te_class.GeneratedName + "::" ) + te_val.buffer;
      end if;
      te_val.OAL = te_tfr.Key_Lett + "::";
    end if;
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    params_OAL = te_parm.OALParamBuffer;
    te_val.OAL = ( ( te_val.OAL + te_tfr.Name ) + ( "(" + params_OAL ) ) + ")";
    if ( "c_t *" == te_aba.ReturnDataType )
      if ( not te_sys.InstanceLoading )
        select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
        sretvar = ( ( "vtrv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
        te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
        if ( "" == parameters )
          parameters = sretvar;
        else
          parameters = ( ( sretvar + ", " ) + parameters );
        end if;
      end if;
    end if;
    if ( te_tfr.Instance_Based == 1 )
      if ( ( "C++" == te_target.language ) or ( "" != parameters ) )
        te_val.buffer = te_val.buffer + ", ";
      end if;
    end if;
    if ( "C++" == te_target.language )
      te_val.buffer = te_val.buffer + "thismodule";
      if ( "" != parameters )
        te_val.buffer = te_val.buffer + ", ";
      end if;
    end if;
    te_val.buffer = ( te_val.buffer + parameters ) + ")";
    te_val.dimensions = te_aba.dimensions;
    te_val.array_spec = te_aba.array_spec;
    select one te_dim related by te_aba->TE_DIM[R2058];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    else
          end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d91b48fa-0304-4d4d-a4c4-dbcec6d93176",
	"d655c501-3d97-4819-a342-fa8cc2d927ed",
	'v_trv',
	"ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("d655c501-3d97-4819-a342-fa8cc2d927ed",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("46fc9ca8-d2b8-44ff-bf42-25abb810604e",
	"00000000-0000-0000-0000-000000000000",
	'val_synch_service_values',
	'',
	'//
select many v_fnvs from instances of V_FNV;
for each v_fnv in v_fnvs
  ::val_synch_service_value( v_fnv:v_fnv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("46fc9ca8-d2b8-44ff-bf42-25abb810604e",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a57a9b3f-7766-4397-a56c-47a955e84f63",
	"00000000-0000-0000-0000-000000000000",
	'val_synch_service_value',
	'',
	'//
v_fnv = param.v_fnv;
select one te_sync related by v_fnv->S_SYNC[R827]->TE_SYNC[R2023];
if ( not_empty te_sync )
  select any te_sys from instances of TE_SYS;
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_fnv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  if ( "" == te_val.buffer )
    select many v_pars related by v_fnv->V_PAR[R817];
    select one te_aba related by te_sync->TE_ABA[R2010];
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    params_OAL = te_parm.OALParamBuffer;
    te_val.OAL = ( ( "::" + te_sync.Name ) + ( "(" + params_OAL ) ) + ")";
    if ( "c_t *" == te_aba.ReturnDataType )
      if ( not te_sys.InstanceLoading )
        select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
        sretvar = ( ( "vfnv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
        te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
        if ( "" == parameters )
          parameters = sretvar;
        else
          parameters = ( ( sretvar + ", " ) + parameters );
        end if;
      end if;
    end if;
    name = te_sync.intraface_method;
    if ( "C++" == te_target.language )
      name = "thismodule->" + name;
    end if;
    te_val.buffer = name + "(";
    if ( "" != parameters )
      te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
    end if;
    te_val.buffer = te_val.buffer + ")";
    te_val.dimensions = te_aba.dimensions;
    te_val.array_spec = te_aba.array_spec;
    select one te_dim related by te_aba->TE_DIM[R2058];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    else
          end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("03dc32ae-d75d-438c-9518-fd54e2966935",
	"a57a9b3f-7766-4397-a56c-47a955e84f63",
	'v_fnv',
	"6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("a57a9b3f-7766-4397-a56c-47a955e84f63",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fec4c13a-a80b-45f2-bd24-6098598e8378",
	"00000000-0000-0000-0000-000000000000",
	'val_array_element_references',
	'',
	'//
select many v_aers from instances of V_AER;
for each v_aer in v_aers
  ::val_array_element_reference( v_aer:v_aer );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("fec4c13a-a80b-45f2-bd24-6098598e8378",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("636f1756-8179-4727-928f-0395b6b82698",
	"00000000-0000-0000-0000-000000000000",
	'val_array_element_reference',
	'',
	'//
v_aer = param.v_aer;
select one te_val related by v_aer->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_aer->V_VAL[R838];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one index_v_val related by v_aer->V_VAL[R839];
  select one index_te_val related by index_v_val->TE_VAL[R2040];
  if ( "" == index_te_val.buffer )
    ::gen_value( v_val:index_v_val );
  end if;
  te_val.OAL = ( root_te_val.OAL + "[" ) + ( index_te_val.buffer + "]" );
  te_val.buffer = ( root_te_val.buffer + "[" ) + ( index_te_val.buffer + "]" );
  // Peel off outer layer of dimensions.
  // CDS:  do not know how to do this with array_spec
  te_val.array_spec = root_te_val.array_spec;
  te_val.dimensions = root_te_val.dimensions - 1;
  select one next_te_dim related by root_te_val->TE_DIM[R2079]->TE_DIM[R2060.''precedes''];
  if ( not_empty next_te_dim )
    relate te_val to next_te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1ef0a8bb-5489-4f02-bee9-30e91791b9e2",
	"636f1756-8179-4727-928f-0395b6b82698",
	'v_aer',
	"9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Element Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("636f1756-8179-4727-928f-0395b6b82698",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("29081678-09bf-4e70-b0f9-be0b1f641bb4",
	"00000000-0000-0000-0000-000000000000",
	'val_array_length_values',
	'',
	'//
select many v_alvs from instances of V_ALV;
for each v_alv in v_alvs
  ::val_array_length_value( v_alv:v_alv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("29081678-09bf-4e70-b0f9-be0b1f641bb4",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("97bf08f4-ac26-43ed-b2fd-5395539f6f65",
	"00000000-0000-0000-0000-000000000000",
	'val_array_length_value',
	'',
	'//
v_alv = param.v_alv;
select one te_val related by v_alv->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_alv->V_VAL[R840];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  te_val.OAL = root_te_val.OAL + ".length";
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    select one te_dim related by root_te_val->TE_DIM[R2079];
    if ( not_empty te_dim )
      te_val.buffer = ( ( ( T::s(i:te_dim.elementCount) + " /" ) + ( "* " + te_val.OAL ) ) + ( " *" + "/" ) );
    else
      te_val.buffer = root_te_val.buffer + ".ARRAY_LENGTH_NOT_FOUND()";
      T::print(s:"ERROR:  C model compiler does not support length operator for OAL value:  ${te_val.OAL}");
      T::exit(i:101);
    end if;
  else
    te_val.buffer = root_te_val.buffer + ".length";
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c8a59a99-8d03-4884-bcdf-2e0f409e48e5",
	"97bf08f4-ac26-43ed-b2fd-5395539f6f65",
	'v_alv',
	"6f6f82d2-7f88-433b-ad08-9cc89e36a814",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6f6f82d2-7f88-433b-ad08-9cc89e36a814",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Length Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("97bf08f4-ac26-43ed-b2fd-5395539f6f65",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	1,
	"f76021f0-a257-44e3-a11e-4104b91c38ec",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("f76021f0-a257-44e3-a11e-4104b91c38ec",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'mcmc',
	'',
	0,
	'../mcmc.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'escher',
	1,
	'../../escher.xtuml');
