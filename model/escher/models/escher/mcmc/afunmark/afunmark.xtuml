-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunmark',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("240d1b9c-259c-4584-b871-c629310c020d",
	112,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'escher::mcmc::afunmark');
INSERT INTO DIM_DIA
	VALUES ("240d1b9c-259c-4584-b871-c629310c020d",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("67bb7500-0ae0-45e4-af58-82f9f4dd56f6",
	"00000000-0000-0000-0000-000000000000",
	'WireSynchServiceOoaBridge',
	'',
	'//============================================================================
// $RCSfile: m.bridge.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) bridge.clr file.
//============================================================================
//
//============================================================================
initiant = param.initiant;
ee_key_letters = param.ee_key_letters;
recipient = param.recipient;
T::print(s:"Note:  WireSynchServiceOoaBridge is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("cce44a6d-da08-4310-bc9b-8a48a3e46b91",
	"67bb7500-0ae0-45e4-af58-82f9f4dd56f6",
	'initiant',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("01843d6b-7d66-414f-a14f-9cfe711872fe",
	"67bb7500-0ae0-45e4-af58-82f9f4dd56f6",
	'ee_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cce44a6d-da08-4310-bc9b-8a48a3e46b91",
	'');
INSERT INTO S_SPARM
	VALUES ("69224ebc-25bf-405f-a72f-0fd29da127a4",
	"67bb7500-0ae0-45e4-af58-82f9f4dd56f6",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"01843d6b-7d66-414f-a14f-9cfe711872fe",
	'');
INSERT INTO PE_PE
	VALUES ("67bb7500-0ae0-45e4-af58-82f9f4dd56f6",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizeExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fed563a0-7cd4-4a90-931c-271666f517ec",
	"be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e646a63f-2713-47e4-8ede-611a421a6a97",
	"be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fed563a0-7cd4-4a90-931c-271666f517ec",
	'');
INSERT INTO S_SPARM
	VALUES ("a9ee712a-3ed8-44d9-ad7f-8ce7aea0b1cf",
	"be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e646a63f-2713-47e4-8ede-611a421a6a97",
	'');
INSERT INTO S_SPARM
	VALUES ("9a910c53-5b27-471b-bcaa-1c56f072149b",
	"be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a9ee712a-3ed8-44d9-ad7f-8ce7aea0b1cf",
	'');
INSERT INTO S_SPARM
	VALUES ("c82b557e-f514-49e9-9aee-0be5340a0613",
	"be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9a910c53-5b27-471b-bcaa-1c56f072149b",
	'');
INSERT INTO PE_PE
	VALUES ("be3e0f87-5452-48d9-9c94-8a0acb91b69b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizedExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3bed9160-e9ba-4446-93db-2d8587f35d52",
	"87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0d6b00ae-6602-41a6-9efb-7f18dcaa94e9",
	"87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3bed9160-e9ba-4446-93db-2d8587f35d52",
	'');
INSERT INTO S_SPARM
	VALUES ("c04da91e-71a4-4901-a7dc-d0a5a4608144",
	"87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0d6b00ae-6602-41a6-9efb-7f18dcaa94e9",
	'');
INSERT INTO S_SPARM
	VALUES ("a695f2d5-e7c2-4fda-bce1-b1215c987537",
	"87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c04da91e-71a4-4901-a7dc-d0a5a4608144",
	'');
INSERT INTO S_SPARM
	VALUES ("dbdbdb7e-8ddc-4593-97eb-373c84893841",
	"87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a695f2d5-e7c2-4fda-bce1-b1215c987537",
	'');
INSERT INTO PE_PE
	VALUES ("87a82ecb-6774-4ad1-a076-66c834f8ebc8",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0cbb1a99-00ff-4c94-bb3e-8da0ec05ef58",
	"00000000-0000-0000-0000-000000000000",
	'TagSyncServiceSafeForInterrupts',
	'',
	'//
//
//============================================================================
// Mark a function (synchronous service) as being safe for 
// interrupt service routine (ISR) invocation.  This is also useful
// for task communication and other multi-context situations.
//============================================================================
component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select any tm_sync from instances of TM_SYNC where ( ( selected.RegisteredDomain == component_name ) and ( selected.Name == function_name ) );
if ( empty tm_sync )
  create object instance tm_sync of TM_SYNC;
  tm_sync.RegisteredDomain = component_name;
  tm_sync.Name = function_name;
end if;
tm_sync.IsSafeForInterrupts = true;
T::print(s:"Function ${function_name} in component ${component_name} marked as safe for interrupt invocation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5d8cdf3a-e727-4e29-9640-66870a5b264c",
	"0cbb1a99-00ff-4c94-bb3e-8da0ec05ef58",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b31a000d-a7c1-4d76-936c-01d59ed3cf95",
	"0cbb1a99-00ff-4c94-bb3e-8da0ec05ef58",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5d8cdf3a-e727-4e29-9640-66870a5b264c",
	'');
INSERT INTO PE_PE
	VALUES ("0cbb1a99-00ff-4c94-bb3e-8da0ec05ef58",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("76e3451c-0932-435f-8576-6653edb0d21a",
	"00000000-0000-0000-0000-000000000000",
	'TagSystemObjectDefaultExtentSize',
	'',
	'//============================================================================
// $RCSfile: m.class.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) object.clr file.
//============================================================================
//
//============================================================================
// Set default extension for entire component.
//============================================================================
extent_size = param.extent_size;
::MarkSystemObjectDefaultExtentSize( extent_size:extent_size );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1122f25d-c68f-413c-8bfe-55cc826a9222",
	"76e3451c-0932-435f-8576-6653edb0d21a",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("76e3451c-0932-435f-8576-6653edb0d21a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9123b8a4-7e74-481e-9abd-0959ee8f8d82",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemObjectDefaultExtentSize',
	'',
	'extent_size = param.extent_size;
select many te_classes from instances of TE_CLASS;
for each te_class in te_classes
  te_class.MaxExtentSize = extent_size;
end for;
T::print(s:"Class default extent size is $t{extent_size} for _all_ classes.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("ef35f0f6-e327-45c8-802e-d5ae57744f1d",
	"9123b8a4-7e74-481e-9abd-0959ee8f8d82",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9123b8a4-7e74-481e-9abd-0959ee8f8d82",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4c6dac3f-7acc-477b-aeec-5de1440af0c1",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectExtentSize',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectExtentSize( component_name:te_c.Name, obj_key_letters:obj_key_letters, extent_size:extent_size );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("78cd9a84-5a14-445d-8370-f4b357b33aeb",
	"4c6dac3f-7acc-477b-aeec-5de1440af0c1",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b3fa4c1e-3397-4d51-bbdc-935d5cb2039b",
	"4c6dac3f-7acc-477b-aeec-5de1440af0c1",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"78cd9a84-5a14-445d-8370-f4b357b33aeb",
	'');
INSERT INTO PE_PE
	VALUES ("4c6dac3f-7acc-477b-aeec-5de1440af0c1",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6344bbbd-e990-488c-89c1-2e02bda14b0b",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectExtentSize',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.MaxExtentSize = extent_size;
    T::print(s:"Class ''${te_class.Name}'' (${te_class.Key_Lett}) extent size is $t{extent_size}");
  else
    T::print(s:"ERROR:  Class (${obj_key_letters}) not found in component ''${te_c.Name}''.");
    T::print(s:"      => MarkObjectExtentSize( ${obj_key_letters}, $t{extent_size} )");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("bb579781-9266-4800-9001-bb28b1174c06",
	"6344bbbd-e990-488c-89c1-2e02bda14b0b",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a7b19576-bd28-44e5-814b-d395b2d28dd2",
	"6344bbbd-e990-488c-89c1-2e02bda14b0b",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bb579781-9266-4800-9001-bb28b1174c06",
	'');
INSERT INTO S_SPARM
	VALUES ("80f149a9-1465-4aee-8946-c24d6deb93c7",
	"6344bbbd-e990-488c-89c1-2e02bda14b0b",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a7b19576-bd28-44e5-814b-d395b2d28dd2",
	'');
INSERT INTO PE_PE
	VALUES ("6344bbbd-e990-488c-89c1-2e02bda14b0b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("504e5606-9ad0-48db-87b9-59095d246179",
	"00000000-0000-0000-0000-000000000000",
	'TagTransformerGeneration',
	'',
	'//
//============================================================================
// This function was used in previous versions of MC-3020 to enable
// the generation of code from actions in transformers (operations).
// This function is deprecated in favor of translating operations by
// default.  Translation may be disabled with MarkClassOperationTranslationOff.
//============================================================================
obj_key_letters = param.obj_key_letters;
transformer_name = param.transformer_name;
T::print(s:"Note:  TagTransformerGeneration is no longer used.  Please use");
T::print(s:"MarkClassOperationTranslationOff to control semantic translation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6b569758-dd15-48ab-9381-650591e6da76",
	"504e5606-9ad0-48db-87b9-59095d246179",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("096dfc39-873c-4fdd-9b91-cf627cf67407",
	"504e5606-9ad0-48db-87b9-59095d246179",
	'transformer_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6b569758-dd15-48ab-9381-650591e6da76",
	'');
INSERT INTO PE_PE
	VALUES ("504e5606-9ad0-48db-87b9-59095d246179",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f9e52ac5-3a43-4c95-b920-33c65b90229e",
	"00000000-0000-0000-0000-000000000000",
	'TagClassOperationTranslationOff',
	'',
	'//
//============================================================================
// Disable the translation of class operation processing semantics.
// The default is for all operations to be translated.
//============================================================================
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassOperationTranslationOff( component_name:te_c.Name, obj_key_letters:obj_key_letters, op_name:op_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("104d46b3-567c-4104-a616-240cda7695ff",
	"f9e52ac5-3a43-4c95-b920-33c65b90229e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8a0f49fc-321f-4b4d-98de-3ab0414cda51",
	"f9e52ac5-3a43-4c95-b920-33c65b90229e",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"104d46b3-567c-4104-a616-240cda7695ff",
	'');
INSERT INTO PE_PE
	VALUES ("f9e52ac5-3a43-4c95-b920-33c65b90229e",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("345e7870-0802-4d2e-9779-546efcc7e2ec",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassOperationTranslationOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
  else
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  end if;
  if ( empty te_classes )
    msg = "ERROR:  Class ${obj_key_letters} not found in component.";
    msg = msg + "\n => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
  end if;
  for each te_class in te_classes
    if ( "*" == op_name )
      select many te_tfrs related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024];
      if ( not_empty te_tfrs )
        for each te_tfr in te_tfrs
          te_tfr.XlateSemantics = false;
        end for;
        msg = "Class ${te_class.Name} (${te_class.Key_Lett}) all operation semantics disabled.";
      end if;
    else
      select any o_tfr related by te_class->O_OBJ[R2019]->O_TFR[R115] where ( selected.Name == op_name );
      if ( not_empty o_tfr )
        select one te_tfr related by o_tfr->TE_TFR[R2024];
        te_tfr.XlateSemantics = false;
        msg = "Class Operation ${te_class.Name} ${te_class.Key_Lett}::${te_tfr.Name} semantics disabled.";
      else
        msg = "ERROR:  Class Operation ${te_class.Name} ${te_class.Key_Lett}::${op_name} is not defined.";
        msg = msg + "\n  => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
      end if;
    end if;
  end for;
  if ( msg != "" )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fa795c1d-416a-4b94-8837-d7e8f98c6694",
	"345e7870-0802-4d2e-9779-546efcc7e2ec",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9a75abdf-3629-4e95-891b-decbebc7910d",
	"345e7870-0802-4d2e-9779-546efcc7e2ec",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fa795c1d-416a-4b94-8837-d7e8f98c6694",
	'');
INSERT INTO S_SPARM
	VALUES ("3ce89d30-8c4a-4229-98f8-6105b9d587da",
	"345e7870-0802-4d2e-9779-546efcc7e2ec",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9a75abdf-3629-4e95-891b-decbebc7910d",
	'');
INSERT INTO PE_PE
	VALUES ("345e7870-0802-4d2e-9779-546efcc7e2ec",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("78fdc4d7-1ef2-4e56-9c8c-60eecff33751",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOff',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOff( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("54bc8728-34d7-4ba2-8317-dae07d68edd9",
	"78fdc4d7-1ef2-4e56-9c8c-60eecff33751",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("78fdc4d7-1ef2-4e56-9c8c-60eecff33751",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("53200bc0-670e-402c-984c-4da98fdf0d22",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = false;
    end for;
    msg = "Class tracing for all is disabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = false;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is disabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOff( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("f4ca9165-9679-449a-bf9c-73629c31d6f5",
	"53200bc0-670e-402c-984c-4da98fdf0d22",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bf591287-d97d-4850-9660-5e520278bdee",
	"53200bc0-670e-402c-984c-4da98fdf0d22",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f4ca9165-9679-449a-bf9c-73629c31d6f5",
	'');
INSERT INTO PE_PE
	VALUES ("53200bc0-670e-402c-984c-4da98fdf0d22",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f94bdd90-8434-4bb1-81cf-c0fbaca7d510",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOn',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOn( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5bd2e687-2a57-4e89-9a33-181b51a06673",
	"f94bdd90-8434-4bb1-81cf-c0fbaca7d510",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f94bdd90-8434-4bb1-81cf-c0fbaca7d510",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("70d2cd94-f841-4117-b44a-48100f55ba56",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOn',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = true;
    end for;
    msg = "Class tracing for all is enabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = true;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is enabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOn( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3162f5b0-f4fd-41e9-b622-fb1af019960f",
	"70d2cd94-f841-4117-b44a-48100f55ba56",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("70982123-6efa-4f51-9d24-76a236c1d513",
	"70d2cd94-f841-4117-b44a-48100f55ba56",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3162f5b0-f4fd-41e9-b622-fb1af019960f",
	'');
INSERT INTO PE_PE
	VALUES ("70d2cd94-f841-4117-b44a-48100f55ba56",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5ed86867-b774-415e-a2bd-adcd3eb16f4b",
	"00000000-0000-0000-0000-000000000000",
	'TagPEIsDefinedInData',
	'',
	'//
//============================================================================
// Identify this class as having preexisting instances defined
// in data.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPEIsDefinedInData( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("03f111f0-80f3-42eb-b206-e6cbe96f4bff",
	"5ed86867-b774-415e-a2bd-adcd3eb16f4b",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2c0968a0-1846-49ec-9925-4aebdd3f3283",
	"5ed86867-b774-415e-a2bd-adcd3eb16f4b",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"03f111f0-80f3-42eb-b206-e6cbe96f4bff",
	'');
INSERT INTO PE_PE
	VALUES ("5ed86867-b774-415e-a2bd-adcd3eb16f4b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9533c01d-7339-4ea7-81c8-e9eb15ec6469",
	"00000000-0000-0000-0000-000000000000",
	'MarkPEIsDefinedInData',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkPEIsDefinedInData( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.PEIsDefinedInData = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked to enable PEIs in data.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("f0a366eb-f8dc-4645-9e49-747d453278a0",
	"9533c01d-7339-4ea7-81c8-e9eb15ec6469",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("29768a98-e26f-458e-a8f5-d4098667c1e0",
	"9533c01d-7339-4ea7-81c8-e9eb15ec6469",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f0a366eb-f8dc-4645-9e49-747d453278a0",
	'');
INSERT INTO S_SPARM
	VALUES ("53a13d1a-af50-4914-9e2b-7409f2fda3b1",
	"9533c01d-7339-4ea7-81c8-e9eb15ec6469",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"29768a98-e26f-458e-a8f5-d4098667c1e0",
	'');
INSERT INTO PE_PE
	VALUES ("9533c01d-7339-4ea7-81c8-e9eb15ec6469",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c8e8d4f1-b597-4092-88df-7bc556679224",
	"00000000-0000-0000-0000-000000000000",
	'TagStaticInstancePopulation',
	'',
	'//
//============================================================================
// Identify this class as having a static instance population.
// That is, after initialization is complete, instances are neither
// created nor destroyed.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStaticInstancePopulation( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("eaec082b-29ee-43a3-9c6b-da9180af93bc",
	"c8e8d4f1-b597-4092-88df-7bc556679224",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("aebe3e17-68bb-42b2-a3a3-29f0121cf41f",
	"c8e8d4f1-b597-4092-88df-7bc556679224",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eaec082b-29ee-43a3-9c6b-da9180af93bc",
	'');
INSERT INTO PE_PE
	VALUES ("c8e8d4f1-b597-4092-88df-7bc556679224",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ceda86a5-2168-44dd-8bed-da41693c22b5",
	"00000000-0000-0000-0000-000000000000",
	'MarkStaticInstancePopulation',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkStaticInstancePopulation( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsFixedPopulation = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as\n";
    msg = msg + "as having a static instance population.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("37a3f47a-b125-47d0-ae4e-bddd438f8b10",
	"ceda86a5-2168-44dd-8bed-da41693c22b5",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7092c974-f2ef-48c5-afab-3216a49d3796",
	"ceda86a5-2168-44dd-8bed-da41693c22b5",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"37a3f47a-b125-47d0-ae4e-bddd438f8b10",
	'');
INSERT INTO S_SPARM
	VALUES ("211b7bb6-33bc-4453-a4db-b4efd7ad10f1",
	"ceda86a5-2168-44dd-8bed-da41693c22b5",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7092c974-f2ef-48c5-afab-3216a49d3796",
	'');
INSERT INTO PE_PE
	VALUES ("ceda86a5-2168-44dd-8bed-da41693c22b5",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("168d9156-5c54-4d4b-b8d6-f80d0bdb4b69",
	"00000000-0000-0000-0000-000000000000",
	'TagReadOnly',
	'',
	'//
//============================================================================
// Mark object as read only.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkReadOnly( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("415fd63d-f6e4-4183-853a-6c0ea068c33b",
	"168d9156-5c54-4d4b-b8d6-f80d0bdb4b69",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1175fdd4-3d44-43cc-8505-a24913cc2fb1",
	"168d9156-5c54-4d4b-b8d6-f80d0bdb4b69",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"415fd63d-f6e4-4183-853a-6c0ea068c33b",
	'');
INSERT INTO PE_PE
	VALUES ("168d9156-5c54-4d4b-b8d6-f80d0bdb4b69",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5a941e47-c3d4-43f6-b799-5994b3da42f3",
	"00000000-0000-0000-0000-000000000000",
	'MarkReadOnly',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkReadOnly( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsReadOnly = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as read only.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c554c0a9-39c8-4783-bcff-700c23aa2883",
	"5a941e47-c3d4-43f6-b799-5994b3da42f3",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("29624268-8d08-4417-a85f-d4daabff4cf9",
	"5a941e47-c3d4-43f6-b799-5994b3da42f3",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c554c0a9-39c8-4783-bcff-700c23aa2883",
	'');
INSERT INTO S_SPARM
	VALUES ("7300565b-d8a8-421f-8afa-83ba297a2e50",
	"5a941e47-c3d4-43f6-b799-5994b3da42f3",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"29624268-8d08-4417-a85f-d4daabff4cf9",
	'');
INSERT INTO PE_PE
	VALUES ("5a941e47-c3d4-43f6-b799-5994b3da42f3",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d50fe5cb-68db-4fe4-9a4e-42dd45fc7dea",
	"00000000-0000-0000-0000-000000000000",
	'TagPersistentClass',
	'',
	'//
//============================================================================
// Enable persistent storage of the specified class or classes.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPersistentClass( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5742388e-48d3-4ea1-b196-2bfacd3b96d7",
	"d50fe5cb-68db-4fe4-9a4e-42dd45fc7dea",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0539da76-5100-4392-8b0d-155b1a7b0692",
	"d50fe5cb-68db-4fe4-9a4e-42dd45fc7dea",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5742388e-48d3-4ea1-b196-2bfacd3b96d7",
	'');
INSERT INTO PE_PE
	VALUES ("d50fe5cb-68db-4fe4-9a4e-42dd45fc7dea",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("247c61c7-18a7-470d-9a1f-4e6aab567be5",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistentClass',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkPersistentClass( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("afce85ac-7cfe-4287-9468-63b35ed84c7a",
	"247c61c7-18a7-470d-9a1f-4e6aab567be5",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8c269130-1fb4-48e4-98ea-7c4cae41620d",
	"247c61c7-18a7-470d-9a1f-4e6aab567be5",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"afce85ac-7cfe-4287-9468-63b35ed84c7a",
	'');
INSERT INTO S_SPARM
	VALUES ("ed83b56c-7063-4994-8eaa-eedea21355d4",
	"247c61c7-18a7-470d-9a1f-4e6aab567be5",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8c269130-1fb4-48e4-98ea-7c4cae41620d",
	'');
INSERT INTO PE_PE
	VALUES ("247c61c7-18a7-470d-9a1f-4e6aab567be5",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d5b35d18-0c43-4a65-b42a-716539a468eb",
	"00000000-0000-0000-0000-000000000000",
	'TagNonPersistentClass',
	'',
	'//
//============================================================================
// Disable persistent storage of the specified class or classes.
// This interface is meant to undo what the MarkPersistent interface
// does.  This way the user can tag all classes persistent and then
// unmark a few (rather than explicitly mark a whole bunch).
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkNonPersistentClass( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("48142c99-cb08-490b-9e14-2363a117d8dc",
	"d5b35d18-0c43-4a65-b42a-716539a468eb",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d39f163e-99fe-46f6-95a3-28cba7c22796",
	"d5b35d18-0c43-4a65-b42a-716539a468eb",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"48142c99-cb08-490b-9e14-2363a117d8dc",
	'');
INSERT INTO PE_PE
	VALUES ("d5b35d18-0c43-4a65-b42a-716539a468eb",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6e91dcfc-a30c-48fd-8b0d-5d9aab8b2a95",
	"00000000-0000-0000-0000-000000000000",
	'MarkNonPersistentClass',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkNonPersistentClass( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = false;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as not persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("29579a0a-e51b-4b28-a35c-9412ca8fbf75",
	"6e91dcfc-a30c-48fd-8b0d-5d9aab8b2a95",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a892baea-37ee-44b7-8b2d-6b5829e2feff",
	"6e91dcfc-a30c-48fd-8b0d-5d9aab8b2a95",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"29579a0a-e51b-4b28-a35c-9412ca8fbf75",
	'');
INSERT INTO S_SPARM
	VALUES ("903e3bda-0be1-4c2b-bc67-0b164898e3ed",
	"6e91dcfc-a30c-48fd-8b0d-5d9aab8b2a95",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a892baea-37ee-44b7-8b2d-6b5829e2feff",
	'');
INSERT INTO PE_PE
	VALUES ("6e91dcfc-a30c-48fd-8b0d-5d9aab8b2a95",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7bcd5f11-c9e3-4211-86ac-c29da70f9ca2",
	"00000000-0000-0000-0000-000000000000",
	'MapClassToTask',
	'',
	'//
//============================================================================
// Map classes to tasks based upon user marking.  With this interface
// an individual class, package or component can be mapped to the
// specified task.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassToTask( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters, task:task );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4fb09628-3fb6-43c9-95f9-c799741c1bd2",
	"7bcd5f11-c9e3-4211-86ac-c29da70f9ca2",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4f4e4b51-5eea-4b38-ae51-e6cce6e39f27",
	"7bcd5f11-c9e3-4211-86ac-c29da70f9ca2",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4fb09628-3fb6-43c9-95f9-c799741c1bd2",
	'');
INSERT INTO S_SPARM
	VALUES ("ce145404-0e3e-4712-979b-41281ce6083a",
	"7bcd5f11-c9e3-4211-86ac-c29da70f9ca2",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"4f4e4b51-5eea-4b38-ae51-e6cce6e39f27",
	'');
INSERT INTO PE_PE
	VALUES ("7bcd5f11-c9e3-4211-86ac-c29da70f9ca2",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5a82e4ac-8d3c-4ca5-9a37-43e3a248342e",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassToTask',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
task = param.task;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    T::print(s:"ERROR:  MapClassToTask( ${package_name}, ${obj_key_letters}, $t{task} ) in component ${te_c.Name}\n");
  end if;
  for each te_class in te_classes
    te_class.Task = task;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("93a04c55-f8a9-4d79-bf4a-3a05c45df940",
	"5a82e4ac-8d3c-4ca5-9a37-43e3a248342e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ccf0a8bf-4e49-4638-8762-25f6f650ec31",
	"5a82e4ac-8d3c-4ca5-9a37-43e3a248342e",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"93a04c55-f8a9-4d79-bf4a-3a05c45df940",
	'');
INSERT INTO S_SPARM
	VALUES ("8777fef4-b779-49a7-b844-18c1b8e589e2",
	"5a82e4ac-8d3c-4ca5-9a37-43e3a248342e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ccf0a8bf-4e49-4638-8762-25f6f650ec31",
	'');
INSERT INTO S_SPARM
	VALUES ("56843853-93f8-4c12-8089-c8f8fe4b1657",
	"5a82e4ac-8d3c-4ca5-9a37-43e3a248342e",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"8777fef4-b779-49a7-b844-18c1b8e589e2",
	'');
INSERT INTO PE_PE
	VALUES ("5a82e4ac-8d3c-4ca5-9a37-43e3a248342e",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f8e223d9-db60-459f-b7d9-016247f94d0d",
	"00000000-0000-0000-0000-000000000000",
	'MarkAsChannel',
	'',
	'//============================================================================
// $RCSfile: m.component.arc,v $
//
// Description:
// Component level marking functions are found here.
//============================================================================
//
//
//============================================================================
// Mark components as channels using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
::MarkComponentAsChannel( package_name:package_name, component_name:component_name, inc_file:inc_file );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c91e2aa3-b856-491a-b7ff-d0ce90cfcda0",
	"f8e223d9-db60-459f-b7d9-016247f94d0d",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e415a3e8-d5d8-4d55-844f-3293d3925d59",
	"f8e223d9-db60-459f-b7d9-016247f94d0d",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c91e2aa3-b856-491a-b7ff-d0ce90cfcda0",
	'');
INSERT INTO S_SPARM
	VALUES ("46458838-69f4-4c9f-8ab3-c6ec974f19ec",
	"f8e223d9-db60-459f-b7d9-016247f94d0d",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e415a3e8-d5d8-4d55-844f-3293d3925d59",
	'');
INSERT INTO PE_PE
	VALUES ("f8e223d9-db60-459f-b7d9-016247f94d0d",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc7a98df-f3d6-42bb-8fbd-ab1f74f31f04",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsChannel',
	'',
	'package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentAsChannel - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    relate te_c to tm_c across R2804;
  end if;
  tm_c.isChannel = true;
  tm_c.include_file = inc_file;
  // Now that we have marked this component as a channel modify the message names
  select many te_macts related by te_c->TE_MACT[R2002];
  for each te_mact in te_macts
    select one te_aba related by te_mact->TE_ABA[R2010];
    te_mact.GeneratedName = te_mact.MessageName;
    te_mact.GeneratedName = T::r(s:te_mact.GeneratedName);
    te_aba.GeneratedName = te_mact.GeneratedName;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3b8a1ed3-a8ed-401e-ab55-47ed518f3d48",
	"bc7a98df-f3d6-42bb-8fbd-ab1f74f31f04",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f64eaf0e-189b-4445-82e8-3c55c276e557",
	"bc7a98df-f3d6-42bb-8fbd-ab1f74f31f04",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3b8a1ed3-a8ed-401e-ab55-47ed518f3d48",
	'');
INSERT INTO S_SPARM
	VALUES ("89b77995-620a-44d2-b331-d0c1364af1e6",
	"bc7a98df-f3d6-42bb-8fbd-ab1f74f31f04",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f64eaf0e-189b-4445-82e8-3c55c276e557",
	'');
INSERT INTO PE_PE
	VALUES ("bc7a98df-f3d6-42bb-8fbd-ab1f74f31f04",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("735bce26-85f3-46e7-af0e-418dfddf76bf",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentWithTemplate',
	'',
	'//
//============================================================================
// Mark a component that has a C++ template.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentWithTemplate - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    tm_c.isChannel = false;
    tm_c.include_file = "";
  end if;
  if ( not_empty te_c )
    relate te_c to tm_c across R2804;
  end if;
  // Make the new template the current one for follow-on markings.
  select many tm_templates from instances of TM_TEMPLATE;
  for each tm_template in tm_templates
    tm_template.current = false;
  end for;
  create object instance tm_template of TM_TEMPLATE;
  tm_template.current = true;
  relate tm_template to tm_c across R2800;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("11d716f1-b8d6-4545-bad9-7f9458989d66",
	"735bce26-85f3-46e7-af0e-418dfddf76bf",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c41d24d4-3c0f-4c4a-aec6-27c1e1959b38",
	"735bce26-85f3-46e7-af0e-418dfddf76bf",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"11d716f1-b8d6-4545-bad9-7f9458989d66",
	'');
INSERT INTO PE_PE
	VALUES ("735bce26-85f3-46e7-af0e-418dfddf76bf",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("838d38df-cee1-46e7-a799-060c266f2186",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfaceWithTemplate',
	'',
	'//
//============================================================================
// Mark an interface that has a C++ template.
//============================================================================
package_name = param.package_name;
interface_name = param.interface_name;
select any c_i from instances of C_I where ( false );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any c_i from instances of C_I where ( selected.Name == interface_name );
else
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select any c_i related by ep_pkgs->PE_PE[R8000]->C_I[R8001] where ( selected.Name == interface_name );
end if;
if ( empty c_i )
  T::print(s:"WARNING:  MarkInterfaceWithTemplate - Could not find interface ${package_name}::${interface_name}.");
end if;
create object instance tm_if of TM_IF;
tm_if.Package = package_name;
tm_if.Name = interface_name;
relate tm_if to c_i across R2807;
// Make the new template the current one for follow-on markings.
select many tm_templates from instances of TM_TEMPLATE;
for each tm_template in tm_templates
  tm_template.current = false;
end for;
create object instance tm_template of TM_TEMPLATE;
tm_template.current = true;
relate tm_template to tm_if across R2802;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("be908bde-adc1-4938-a26f-d46671e7a8a0",
	"838d38df-cee1-46e7-a799-060c266f2186",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("df292002-6ba1-4465-8b72-ff81717da883",
	"838d38df-cee1-46e7-a799-060c266f2186",
	'interface_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"be908bde-adc1-4938-a26f-d46671e7a8a0",
	'');
INSERT INTO PE_PE
	VALUES ("838d38df-cee1-46e7-a799-060c266f2186",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	"00000000-0000-0000-0000-000000000000",
	'AddTemplateParameter',
	'',
	'//
//============================================================================
// Add a template parameter to a C++ template.
// The template is located based upon the associated component.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
type_name = param.type_name;
variable_name = param.variable_name;
default_value = param.default_value;
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select any tm_c from instances of TM_C where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any tm_c from instances of TM_C where ( selected.Name == component_name );
  if ( empty tm_c )
    select one tm_c related by tm_template->TM_C[R2800];
  end if;
end if;
if ( empty tm_c )
  select any tm_if from instances of TM_IF where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
  if ( ( "" == package_name ) or ( "*" == package_name ) )
    select any tm_if from instances of TM_IF where ( selected.Name == component_name );
    if ( empty tm_if )
      select one tm_if related by tm_template->TM_IF[R2802];
    end if;
  end if;
  if ( empty tm_if )
    T::print(s:"ERROR:  AddTemplateParameter - Could not find element (component or interface) ${package_name}::${component_name}.");
  else
    select one tm_template related by tm_if->TM_TEMPLATE[R2802];
  end if;
else
  select one tm_template related by tm_c->TM_TEMPLATE[R2800];
end if;
if ( not_empty tm_template )
  create object instance tm_tp of TM_TP;
  relate tm_tp to tm_template across R2801;
  tm_tp.typename = type_name;
  tm_tp.Name = variable_name;
  tm_tp.DefaultValue = default_value;
else
  T::print(s:"ERROR:  AddTemplateParameter - Could not find template for element ${package_name}::${component_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("b06a3552-ff72-4b08-b148-730d37b62f6d",
	"119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("12a41f11-65cc-4a2e-947f-09ff29245114",
	"119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b06a3552-ff72-4b08-b148-730d37b62f6d",
	'');
INSERT INTO S_SPARM
	VALUES ("4883d53a-30b6-4725-b662-cfddd8c60dd4",
	"119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"12a41f11-65cc-4a2e-947f-09ff29245114",
	'');
INSERT INTO S_SPARM
	VALUES ("939c5b80-e9f6-4e46-af48-d4aa5a6a6e59",
	"119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4883d53a-30b6-4725-b662-cfddd8c60dd4",
	'');
INSERT INTO S_SPARM
	VALUES ("92a7a68b-0772-41e8-a179-e328659787cc",
	"119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	'default_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"939c5b80-e9f6-4e46-af48-d4aa5a6a6e59",
	'');
INSERT INTO PE_PE
	VALUES ("119c2014-59de-4a1f-b060-7bdfe1e10fb2",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5d14e4ad-8af8-49ac-a65c-119353a73095",
	"00000000-0000-0000-0000-000000000000",
	'SetTemplateParameter',
	'',
	'//
//============================================================================
// Set the template parameter for an instance of a component or interface
// class.  The template is navigated based upon the associated package
// and instance.
//============================================================================
package_name = param.package_name;
instance = param.instance;
variable_name = param.variable_name;
value = param.value;
// Base selection upon the template that most recently got created.
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select one tm_c related by tm_template->TM_C[R2800];
select one tm_if related by tm_template->TM_IF[R2802];
select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
if ( ( ( "" == package_name ) or ( "" == instance ) ) or ( ( "" == variable_name ) or ( "" == value ) ) )
  T::print(s:"ERROR:  SetTemplateParameter -  Must provide valid strings for all arguments. ${package_name}::${instance}.${variable_name} to value ${value}.");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTemplateParameter -  Package, ${package_name}, not found for ${package_name}::${instance}.${variable_name} to value ${value}.");
  end if;
  if ( not_empty tm_tp )
    if ( not_empty tm_c )
      select any te_ci related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      if ( empty te_ci )
        select any te_ci related by ep_pkg->PE_PE[R8000]->C_C[R8001]->PE_PE[R8003]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      end if;
      if ( not_empty te_ci )
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"ERROR:  SetTemplateParameter - no component instance for ${package_name}::${instance} with name ${variable_name}.");
      end if;
    elif ( not_empty tm_if )
      select many te_iirs related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->TE_IIR[R2046] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
    else
      T::print(s:"ERROR:  SetTemplateParameter - Found a template parameter for a template that is orphaned.");
    end if;
  else
    T::print(s:"WARNING:  SetTemplateParameter - Did NOT find template parameter for package ${package_name}::${instance} with name ${variable_name}.");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("bf7dddbe-d039-4550-ac59-8b6d347b60d1",
	"5d14e4ad-8af8-49ac-a65c-119353a73095",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8b9891d6-01e0-42f8-8083-0559d2112c65",
	"5d14e4ad-8af8-49ac-a65c-119353a73095",
	'instance',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bf7dddbe-d039-4550-ac59-8b6d347b60d1",
	'');
INSERT INTO S_SPARM
	VALUES ("d81bbe45-5fc0-4a07-a1ea-80bc9c65f450",
	"5d14e4ad-8af8-49ac-a65c-119353a73095",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8b9891d6-01e0-42f8-8083-0559d2112c65",
	'');
INSERT INTO S_SPARM
	VALUES ("ad55fb21-68bf-469a-9346-25e0bbf78e24",
	"5d14e4ad-8af8-49ac-a65c-119353a73095",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d81bbe45-5fc0-4a07-a1ea-80bc9c65f450",
	'');
INSERT INTO PE_PE
	VALUES ("5d14e4ad-8af8-49ac-a65c-119353a73095",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a66cb842-00e7-430e-9c18-7aed07965ec5",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV',
	'',
	'//
//============================================================================
// Set Template Parameter Value
//   Once components and interfaces have been marked with C++ templates
//   and all template parameters added, the template parameter values can
//   be set and associated with the appropriate component and interface
//   instances (component references and ports).
//   Set the template parameter for an instance of a component or interface
//   class.  The template is navigated based upon the associated package
//   and instance.
//============================================================================
package_name = param.package_name;
parent_component = param.parent_component;
component = param.component;
classifier_name = param.classifier_name;
port = param.port;
variable_name = param.variable_name;
value = param.value;
trace = "${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} value ${value} (and port ${port})";
if ( ( ( "" == package_name ) or ( "" == component ) ) or ( ( "" == classifier_name ) or ( ( ( "" == variable_name ) or ( "" == value ) ) ) ) )
  T::print(s:"ERROR:  SetTPV - Must provide valid strings for all arguments except the optional port, ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value} (and port ${port}).");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTPV -  Package, ${package_name}, not found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
  end if;
  select many te_cis related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  if ( "" != parent_component )
    select many c_cs related by ep_pkg->PE_PE[R8000]->C_C[R8001] where ( selected.Name == parent_component );
    select many te_cis related by c_cs->PE_PE[R8003]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  else
    if ( empty te_cis )
      select many te_cis related by ep_pkg->PE_PE[R8000]->C_C[R8001]->PE_PE[R8003]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
    end if;
  end if;
  te_cis_count = cardinality te_cis;
  if ( te_cis_count > 1 )
    T::print(s:"WARNING:  SetTPV - More than one instantiation found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
    T::print(s:"                   All instantiations will be marked to receive the same template parameter value.");
  elif ( 0 == te_cis_count )
    T::print(s:"ERROR:  SetTPV - Component instance not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
  end if;
  if ( "" == port )
    // We are setting values for component templates.
    for each te_ci in te_cis
      select one tm_template related by te_ci->TE_C[R2008]->TM_C[R2804]->TM_TEMPLATE[R2800];
      select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
      if ( not_empty tm_tp )
        // Create the template parameter value and link it in.
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = component;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"WARNING:  SetTPV - Template parameter not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
      end if;
    end for;
  else
    // We are setting a value for an interface template.
    for each te_ci in te_cis
      select any te_iir related by te_ci->CL_IC[R2009]->CL_POR[R4707]->CL_IIR[R4708]->TE_IIR[R2013] where ( selected.port_name == port );
      ::SetTPV_for_channel_connection( te_iir:te_iir, variable_name:variable_name, value:value, trace:trace, flavor:0 );
    end for;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("b872fcc5-e0e7-49de-bc6f-979e2435eaac",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7e9e2b16-2e59-49e3-9ac8-6ee2edfcfe03",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'parent_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b872fcc5-e0e7-49de-bc6f-979e2435eaac",
	'');
INSERT INTO S_SPARM
	VALUES ("6b11e89a-0903-41ee-b4bc-2cd6bcb850bf",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7e9e2b16-2e59-49e3-9ac8-6ee2edfcfe03",
	'');
INSERT INTO S_SPARM
	VALUES ("fd6d0d67-1e1d-45d1-a38e-61ff4850a53b",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'classifier_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6b11e89a-0903-41ee-b4bc-2cd6bcb850bf",
	'');
INSERT INTO S_SPARM
	VALUES ("7ffeca68-26b2-4b8d-8a46-9d6673249ab0",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fd6d0d67-1e1d-45d1-a38e-61ff4850a53b",
	'');
INSERT INTO S_SPARM
	VALUES ("ae02ad35-f161-41d6-ab9d-19fa0521b71c",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7ffeca68-26b2-4b8d-8a46-9d6673249ab0",
	'');
INSERT INTO S_SPARM
	VALUES ("0a80f509-3b78-4f36-90b7-4403b5c0bfdf",
	"a66cb842-00e7-430e-9c18-7aed07965ec5",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ae02ad35-f161-41d6-ab9d-19fa0521b71c",
	'');
INSERT INTO PE_PE
	VALUES ("a66cb842-00e7-430e-9c18-7aed07965ec5",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV_for_channel_connection',
	'',
	'//
// Rules
// Always start from IIR.
// On a first call, first try to cross a satisfaction from IIR.
// It is only possible to go upward on a delegation on the first call.
// After the first call, it is O.K. to cross a satisfaction after crossing
// a delegation.
// After traversing to an imported interface reference, consider marking
// the associated interface reference.  (Mark both.)
// Gather all the delegated_te_iirs into a collection and then loop through.
// This is necessary for delegations only.
// Be smart and look for only the right types in the right direction.
te_iir = param.te_iir;
variable_name = param.variable_name;
value = param.value;
trace = param.trace;
flavor = param.flavor;
select many delegated_te_iirs from instances of TE_IIR where ( false );
// flavors:  0:firstcall, 1:coming from satisfaction, 2:coming from delegation
select any tm_tp related by te_iir->C_IR[R2046]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
if ( empty tm_tp )
  select any tm_tp related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
  if ( empty tm_tp )
    T::print(s:"WARNING:  SetTPV - Template parameter not found for ${trace}.");
  end if;
end if;
// Determine whether we have an interface reference for a component marked
// as a channel.  Process channel interface references on first call only.
select one tm_c related by te_iir->TE_PO[R2080]->TE_C[R2005]->TM_C[R2804];
isChannel = false;
if ( not_empty tm_c )
  isChannel = tm_c.isChannel;
end if;
// See if this template parameter already has a value for this reference.
select any tm_tpv related by te_iir->TM_TPV[R2806] where ( ( selected.instance == te_iir.interface_name ) and ( selected.tm_tpID == tm_tp.ID ) );
// If isChannel, then skip unless it is the first call.
if ( ( ( ( empty tm_tpv ) and ( not_empty tm_tp ) ) and ( not isChannel ) ) or ( 0 == flavor ) )
  //.select one te_c related by te_iir->TE_PO[R2080]->TE_C[R2005]
  //.print "${trace} ${te_iir.port_name} ${te_c.Name}"
  create object instance tm_tpv of TM_TPV;
  tm_tpv.instance = te_iir.interface_name;
  tm_tpv.value = value;
  relate tm_tpv to tm_tp across R2808;
  relate tm_tpv to te_iir across R2806;
    //
  // Find a satisfaction or delegation.  Recursively apply the same template parameter value to the connections.
  select one satisfied_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
  if ( ( 0 == flavor ) or ( 2 == flavor ) )
    // iir to iir
    // Search from imported reference across satisfaction to imported reference provision to requirement.
    select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013];
    if ( not_empty satisfied_te_iirs )
      for each satisfied_te_iir in satisfied_te_iirs
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 1${trace}", flavor:1 );
      end for;
    else
      // Search from imported reference across satisfaction to imported reference requirement to provision.
      select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013];
      if ( not_empty satisfied_te_iir )
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 2${trace}", flavor:1 );
      else
        // mixed iir and ir
        // Search from imported reference across satisfaction to reference imported provision to requirement.
        select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
        if ( not_empty satisfied_te_iirs )
          for each satisfied_te_iir in satisfied_te_iirs
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 3${trace}", flavor:1 );
          end for;
        else
          // Search from imported reference across satisfaction to reference imported requirement to provision.
          select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
          if ( not_empty satisfied_te_iir )
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4${trace}", flavor:1 );
          else
            // Search from reference across satisfaction to reference provision to requirement.
            select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
            if ( not_empty satisfied_te_iir )
              ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4a${trace}", flavor:1 );
            else
              // Search from reference across satisfaction to reference requirement to provision.
              select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
              if ( not_empty satisfied_te_iir )
                ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4b${trace}", flavor:1 );
              else
                // Search from reference across satisfaction to imported reference imported provision to requirement.
                // CDS should not find these, because we already go the other mixed direction?
                //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013]
                if ( not_empty satisfied_te_iir )
                  ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 5${trace}", flavor:1 );
                else
                  // Search from reference across satisfaction to imported reference imported requirement to provision.
                  // CDS should not find these, because we already go the other mixed direction?
                  //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013]
                  if ( not_empty satisfied_te_iir )
                    ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 6${trace}", flavor:1 );
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
  // delegation
  if ( empty satisfied_te_iir )
    select one delegated_te_iir related by satisfied_te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_DG[R4704]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7a " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->CL_IIR[R4704]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7b " + trace;
    end if;
    //     IR DG  RID IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8a " + trace;
    end if;
    //     IR RID DG  IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8b " + trace;
    end if;
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8c " + trace;
    end if;
    //     IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8d " + trace;
    end if;
    // IIR IR RID DG  IR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8e " + trace;
    end if;
    //     IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8f " + trace;
    end if;
    // IIR IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8g " + trace;
    end if;
    // IIR IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8h " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "B " + trace;
    end if;
    for each delegated_te_iir in delegated_te_iirs
      ::SetTPV_for_channel_connection( te_iir:delegated_te_iir, variable_name:variable_name, value:value, trace:"${trace}", flavor:2 );
    end for;
  end if;
else
  if ( empty tm_tp )
    T::print(s:"SetTPV:  warning - no variable ${te_iir.port_name} ${te_iir.interface_name}");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("cad3339a-d5e5-428f-8af5-10e9cd77172c",
	"b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	'te_iir',
	"a765e935-11b6-42b5-a506-6c5c576bec7f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a765e935-11b6-42b5-a506-6c5c576bec7f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Instance>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/extensions/Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("4cd802e6-686e-42a2-836a-270016e6f3fa",
	"b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cad3339a-d5e5-428f-8af5-10e9cd77172c",
	'');
INSERT INTO S_SPARM
	VALUES ("a13276e5-0f71-4f53-9b1d-e65cbdef061d",
	"b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4cd802e6-686e-42a2-836a-270016e6f3fa",
	'');
INSERT INTO S_SPARM
	VALUES ("46629c59-b13d-44ab-95ae-7fb444220ebb",
	"b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a13276e5-0f71-4f53-9b1d-e65cbdef061d",
	'');
INSERT INTO S_SPARM
	VALUES ("3dba93c1-89d6-4bc3-9df3-98ce2aa18c32",
	"b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"46629c59-b13d-44ab-95ae-7fb444220ebb",
	'');
INSERT INTO PE_PE
	VALUES ("b42d3b49-458d-4a08-8dce-b93e908f2ba0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("45c18201-45af-4233-b80c-82df58f81d2f",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfacePrefix',
	'',
	'//
//============================================================================
// Mark the prefixes for the interface naming.
//============================================================================
provided_port = param.provided_port;
required_port = param.required_port;
channel = param.channel;
select any te_prefix from instances of TE_PREFIX;
te_prefix.provided_port = provided_port;
te_prefix.required_port = required_port;
te_prefix.channel = channel;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4aa8687a-51c5-473f-8671-952a036ff687",
	"45c18201-45af-4233-b80c-82df58f81d2f",
	'provided_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("480b975b-ffa3-42e8-9c14-27a9a2943cd7",
	"45c18201-45af-4233-b80c-82df58f81d2f",
	'required_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4aa8687a-51c5-473f-8671-952a036ff687",
	'');
INSERT INTO S_SPARM
	VALUES ("ecad1bf2-faae-444b-b7d5-19446f5b88b5",
	"45c18201-45af-4233-b80c-82df58f81d2f",
	'channel',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"480b975b-ffa3-42e8-9c14-27a9a2943cd7",
	'');
INSERT INTO PE_PE
	VALUES ("45c18201-45af-4233-b80c-82df58f81d2f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("89b38cf3-f981-4b03-bc74-f3bb1d75f8cb",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsRealized',
	'',
	'//
//============================================================================
// Mark components as realized using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
if ( empty c_cs )
  T::print(s:"WARNING:  MarkComponentAsRealized - Could not find component ${package_name}::${component_name}.");
end if;
for each c_c in c_cs
  select any tm_c from instances of TM_C where ( ( selected.Name == component_name ) and ( selected.Package == package_name ) );
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
  end if;
  tm_c.isRealized = true;
  tm_c.include_file = inc_file;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("326da972-ec2f-4906-a5f2-fa7bd193febc",
	"89b38cf3-f981-4b03-bc74-f3bb1d75f8cb",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("04464e77-578a-4ba6-add3-87737d762b78",
	"89b38cf3-f981-4b03-bc74-f3bb1d75f8cb",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"326da972-ec2f-4906-a5f2-fa7bd193febc",
	'');
INSERT INTO S_SPARM
	VALUES ("c728f2d0-0945-4a18-adc9-9510bdff8498",
	"89b38cf3-f981-4b03-bc74-f3bb1d75f8cb",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"04464e77-578a-4ba6-add3-87737d762b78",
	'');
INSERT INTO PE_PE
	VALUES ("89b38cf3-f981-4b03-bc74-f3bb1d75f8cb",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0b9f5862-2e76-426b-a2bc-663bd8d3fcc5",
	"00000000-0000-0000-0000-000000000000",
	'TagDataTypePrecision',
	'',
	'//============================================================================
// $RCSfile: m.datatype.arc,v $
//
// Description:
// This archetype file contains the implementation functions for marks
// specified in the (user supplied/modified) datatype.clr file.
//============================================================================
//
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
tagged_name = param.tagged_name;
initial_value = param.initial_value;
component_name = T::r(s:component_name);
select any tm_precision from instances of TM_PRECISION where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_precision )
  create object instance tm_precision of TM_PRECISION;
end if;
tm_precision.Domain = component_name;
tm_precision.DT_name = dt_name;
tm_precision.xName = tagged_name;
tm_precision.initial_value = initial_value;
T::print(s:"TagDataTypePrecision:  ${dt_name} in ${component_name} given ${tagged_name} precision with ${initial_value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("9f7364ca-4000-4f13-becc-0ded55616f20",
	"0b9f5862-2e76-426b-a2bc-663bd8d3fcc5",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0430102c-25a1-4ddc-96a8-9c611a1f0a21",
	"0b9f5862-2e76-426b-a2bc-663bd8d3fcc5",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9f7364ca-4000-4f13-becc-0ded55616f20",
	'');
INSERT INTO S_SPARM
	VALUES ("1f328b2c-c085-468e-9a27-b514db035d12",
	"0b9f5862-2e76-426b-a2bc-663bd8d3fcc5",
	'tagged_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0430102c-25a1-4ddc-96a8-9c611a1f0a21",
	'');
INSERT INTO S_SPARM
	VALUES ("35ffb823-c1b9-4200-bc0e-be77ce1f957f",
	"0b9f5862-2e76-426b-a2bc-663bd8d3fcc5",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1f328b2c-c085-468e-9a27-b514db035d12",
	'');
INSERT INTO PE_PE
	VALUES ("0b9f5862-2e76-426b-a2bc-663bd8d3fcc5",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("77191d63-be14-443b-8fc9-a32785271aff",
	"00000000-0000-0000-0000-000000000000",
	'MapDataTypeAsPointer',
	'',
	'//
//============================================================================
// Map a user defined data type to a pointer.  This allows the system
// to pass arbitrarily shaped data around by simply pointing to it.
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
pointer_type = param.pointer_type;
include_file = param.include_file;
component_name = T::r(s:component_name);
select any tm_pointer from instances of TM_POINTER where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_pointer )
  create object instance tm_pointer of TM_POINTER;
end if;
tm_pointer.Domain = component_name;
tm_pointer.DT_name = dt_name;
tm_pointer.pointer_type = pointer_type;
tm_pointer.include_file = include_file;
T::print(s:"MapDataTypeAsPointer:  ${dt_name} in ${component_name} given ${pointer_type} mapping (${include_file}).");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("86b1868a-f305-40c2-b169-efb6b58eaa50",
	"77191d63-be14-443b-8fc9-a32785271aff",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("dd40b490-91a9-4d56-b923-5ba0d08d10b0",
	"77191d63-be14-443b-8fc9-a32785271aff",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"86b1868a-f305-40c2-b169-efb6b58eaa50",
	'');
INSERT INTO S_SPARM
	VALUES ("00bbf12a-27e0-4ba6-8b72-831a34ae6ee2",
	"77191d63-be14-443b-8fc9-a32785271aff",
	'pointer_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"dd40b490-91a9-4d56-b923-5ba0d08d10b0",
	'');
INSERT INTO S_SPARM
	VALUES ("91d5ad30-edda-4c0b-a29e-3e2645814916",
	"77191d63-be14-443b-8fc9-a32785271aff",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00bbf12a-27e0-4ba6-8b72-831a34ae6ee2",
	'');
INSERT INTO PE_PE
	VALUES ("77191d63-be14-443b-8fc9-a32785271aff",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2b254fc9-5df8-46af-a8a2-92f7065aa7f6",
	"00000000-0000-0000-0000-000000000000",
	'TagEnumeratorDiscreteValue',
	'',
	'//
//============================================================================
// Specifying Values for Enumerators
//
// To indicate to the model compiler that a user defined enumeration
// data type enumerator (defined in the BridgePoint Subsystem Partitioning
// Model (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagEnumeratorDiscreteValue( "component", "enumeration", "enumerator", "value"
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - name of the enumeration data type as known in the
//     application analysis
//   enumerator - name of the enumerator as known in the application analysis
//   value - a string containing the value to be assigned to the enumerator
//
// Examples:
//  Domain specific:
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "low", "4" )
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "med", "0x20" )
//  System Wide:
//   .invoke TagEnumeratorDiscreteValue( "*", "tube_wattage", "high", "0x40" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
enumerator = param.enumerator;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enumval from instances of TM_ENUMVAL where ( ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) ) and ( selected.enumerator == enumerator ) );
if ( empty tm_enumval )
  create object instance tm_enumval of TM_ENUMVAL;
end if;
tm_enumval.Domain = component_name;
tm_enumval.enumeration = enumeration;
tm_enumval.enumerator = enumerator;
tm_enumval.value = value;
T::print(s:"TagEnumeratorDiscreteValue:  ${enumeration}::${enumerator} in ${component_name} given discrete value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("ecfdc14e-2d05-4bec-bd17-751b8ac5b612",
	"2b254fc9-5df8-46af-a8a2-92f7065aa7f6",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8ab29512-b57e-4261-92f0-1f9d50872ad7",
	"2b254fc9-5df8-46af-a8a2-92f7065aa7f6",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ecfdc14e-2d05-4bec-bd17-751b8ac5b612",
	'');
INSERT INTO S_SPARM
	VALUES ("d84d448b-0217-44e9-90bb-02538287807f",
	"2b254fc9-5df8-46af-a8a2-92f7065aa7f6",
	'enumerator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8ab29512-b57e-4261-92f0-1f9d50872ad7",
	'');
INSERT INTO S_SPARM
	VALUES ("e9c688d8-771c-489c-b734-c37026d11485",
	"2b254fc9-5df8-46af-a8a2-92f7065aa7f6",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d84d448b-0217-44e9-90bb-02538287807f",
	'');
INSERT INTO PE_PE
	VALUES ("2b254fc9-5df8-46af-a8a2-92f7065aa7f6",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6a5c2a34-f49c-4161-9d8f-f58fe2d6309f",
	"00000000-0000-0000-0000-000000000000",
	'TagUninitializedEnumerationValue',
	'',
	'//
//============================================================================
// Specifying Value for the Default Un-Initialized Enumerator
//
// To indicate to the software architecture that the un-initialized enumerator
// of an enumeration (defined in the BridgePoint Subsystem Partitioning Model
// (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagUninitializedEnumerationValue( "component", "enumeration", "value" )
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - Name of the enumeration data type as known in the
//     application analysis. Use "*" to indicate ALL enumerations.
//   value - A string containing the value to be assigned to the uninitialized
//     enumerator.
//
// Examples:
//  Domain specific:
//   .invoke TagUninitializedEnumerationValue( "MO", "tube_wattage", "4" )
//  All Enumerations in Domain:
//   .invoke TagUninitializedEnumerationValue( "MO", "*", "40" )
//  System Wide:
//   .invoke TagUninitializedEnumerationValue( "*", "tube_wattage", "20" )
//  All Enumerations in All Domains:
//   .invoke TagUninitializedEnumerationValue( "*", "*", "100" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enuminit from instances of TM_ENUMINIT where ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) );
if ( empty tm_enuminit )
  create object instance tm_enuminit of TM_ENUMINIT;
end if;
tm_enuminit.Domain = component_name;
tm_enuminit.enumeration = enumeration;
tm_enuminit.value = value;
T::print(s:"TagUninitializedEnumerationValue:  ${enumeration} in ${component_name} given default uninitialized value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4ee2bfa3-23ab-4119-927c-9a173d0d8969",
	"6a5c2a34-f49c-4161-9d8f-f58fe2d6309f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f873b0d3-62de-4604-8100-bbc7aa416089",
	"6a5c2a34-f49c-4161-9d8f-f58fe2d6309f",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4ee2bfa3-23ab-4119-927c-9a173d0d8969",
	'');
INSERT INTO S_SPARM
	VALUES ("38ca1e68-9a3a-4080-96b7-e5113ac81eea",
	"6a5c2a34-f49c-4161-9d8f-f58fe2d6309f",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f873b0d3-62de-4604-8100-bbc7aa416089",
	'');
INSERT INTO PE_PE
	VALUES ("6a5c2a34-f49c-4161-9d8f-f58fe2d6309f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("69a69e7a-6778-425d-bd48-d72bca7807f2",
	"00000000-0000-0000-0000-000000000000",
	'AssignDirectToUDTPackage',
	'',
	'//
//
//============================================================================
// Specifying "Direct" manipulation to "SystemC UDT Pacakage"
//
// to indicate that this UDT package should be generated using its name
// instead of core type
//============================================================================
package_name = param.package_name;
T::print(s:"AssignDirectToUDTPackage is not a supported marking function.");
T::exit(i:1);
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("62fc41f6-aa2a-4eb2-84bd-fadcf9ad8c6a",
	"69a69e7a-6778-425d-bd48-d72bca7807f2",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("69a69e7a-6778-425d-bd48-d72bca7807f2",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7ecdbaaa-2d26-439a-8616-90ec5f96e194",
	"00000000-0000-0000-0000-000000000000",
	'TagFunctionTranslationOff',
	'',
	'//============================================================================
// $RCSfile: m.domain.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) domain.mark file.
//============================================================================
//
//
//============================================================================
// Disable the translation of function processing semantics.
// The default is for all functions to be translated.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFunctionTranslationOff( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("ac60bef9-e58c-401c-a3f3-098b928ab412",
	"7ecdbaaa-2d26-439a-8616-90ec5f96e194",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7ecdbaaa-2d26-439a-8616-90ec5f96e194",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8f0bb9e3-0300-495b-8425-9641d6a44d40",
	"00000000-0000-0000-0000-000000000000",
	'MarkFunctionTranslationOff',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == function_name )
    select many te_syncs related by te_c->TE_SYNC[R2084];
    for each te_sync in te_syncs
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${te_sync.Name} function semantics.";
    end for;
  else
    select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
    if ( not_empty te_sync )
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${function_name} function semantics.";
    else
      msg = "ERROR:  Function (${function_name}) not found in component ${te_c.Name}.";
      msg = msg + "\n  => TagFunctionTranslationOff( ${function_name} )";
    end if;
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a5ade15b-97ce-4122-bd51-6774aafa7009",
	"8f0bb9e3-0300-495b-8425-9641d6a44d40",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2beae9d8-9cb1-4195-91f9-fefb93b9c6cd",
	"8f0bb9e3-0300-495b-8425-9641d6a44d40",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5ade15b-97ce-4122-bd51-6774aafa7009",
	'');
INSERT INTO PE_PE
	VALUES ("8f0bb9e3-0300-495b-8425-9641d6a44d40",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2f697eb2-4c9a-4eda-b336-73143abe6d65",
	"00000000-0000-0000-0000-000000000000",
	'TagInitializationFunction',
	'',
	'//
//============================================================================
// Mark a function as being executed during the initialization sequence.
// All functions marked with this interface will be run during bring-up.
// Functions bearing input arguments are not allowed to be tagged as
// initialization functions.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkInitializationFunction( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4240a4df-5519-4711-b5ca-89c21f2d3bd0",
	"2f697eb2-4c9a-4eda-b336-73143abe6d65",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2f697eb2-4c9a-4eda-b336-73143abe6d65",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2e72966-fee0-4bb5-a984-57a504864ac8",
	"00000000-0000-0000-0000-000000000000",
	'MarkInitializationFunction',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
  if ( not_empty te_sync )
    select any te_parm related by te_sync->TE_ABA[R2010]->TE_PARM[R2062];
    if ( empty te_parm )
      te_sync.IsInitFunction = true;
      msg = "Function ${te_sync.Name} marked as initialization function.";
    else
      msg = "ERROR:  Initialization function (${function_name}) in component ${te_c.Name}";
      msg = msg + "\ntakes arguments.  This is not allowed at initialization.";
      msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
    end if;
  else
    msg = "ERROR:  Initialization function (${function_name}) not found in component ${te_c.Name}.";
    msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6a79f0d6-8bc6-4663-b563-1d5772fe2ebb",
	"a2e72966-fee0-4bb5-a984-57a504864ac8",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d34d9862-883b-4518-982e-b3e2ef7f4427",
	"a2e72966-fee0-4bb5-a984-57a504864ac8",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6a79f0d6-8bc6-4663-b563-1d5772fe2ebb",
	'');
INSERT INTO PE_PE
	VALUES ("a2e72966-fee0-4bb5-a984-57a504864ac8",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9d764f05-b41e-45a6-b1fc-79f5f5e7e748",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeObjectFromCodeGen',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeObjectFromCodeGen( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("be0c315f-e899-46e9-b19c-46d980971f7a",
	"9d764f05-b41e-45a6-b1fc-79f5f5e7e748",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9d764f05-b41e-45a6-b1fc-79f5f5e7e748",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0f3beabb-44e3-4eba-9f01-b46da56b3495",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeObjectFromCodeGen',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.ExcludeFromGen = true;
    msg = "Object ${te_class.Name} (${te_class.Key_Lett}) excluded from code generation.";
  else
    msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}";
    msg = msg + "\n => TagExcludeObjectFromCodeGen( ${obj_key_letters} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a5fc2cc0-f3b0-46a2-9a63-9f645cee9204",
	"0f3beabb-44e3-4eba-9f01-b46da56b3495",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4dfd4278-8a1a-4d4f-8f4d-f445faeed5da",
	"0f3beabb-44e3-4eba-9f01-b46da56b3495",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5fc2cc0-f3b0-46a2-9a63-9f645cee9204",
	'');
INSERT INTO PE_PE
	VALUES ("0f3beabb-44e3-4eba-9f01-b46da56b3495",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("35b31752-72aa-4e2e-8d59-ecb87718dc3a",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeSubsystemFromCodeGen',
	'',
	'//
//============================================================================
subsystem_name = param.subsystem_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeSubsystemFromCodeGen( component_name:te_c.Name, package_name:subsystem_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6ffe9046-86bc-4b27-9c5d-9af344dcd025",
	"35b31752-72aa-4e2e-8d59-ecb87718dc3a",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("35b31752-72aa-4e2e-8d59-ecb87718dc3a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1de36325-ac3a-4798-8f40-604ad88b055a",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
  if ( not_empty ep_pkgs )
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
    for each te_class in te_classes
      te_class.ExcludeFromGen = true;
    end for;
    msg = "All classes in package ${package_name} excluded from code generation.";
  else
    msg = "ERROR:  Package ${package_name} not found in component ${te_c.Name}.";
    msg = msg + "\n => TagExcludePackageFromCodeGen( ${package_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("cc6efc4c-4951-4d50-b543-9300b8029062",
	"1de36325-ac3a-4798-8f40-604ad88b055a",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e9c97a08-46bc-4e7a-9ce0-2f2c389b955a",
	"1de36325-ac3a-4798-8f40-604ad88b055a",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cc6efc4c-4951-4d50-b543-9300b8029062",
	'');
INSERT INTO PE_PE
	VALUES ("1de36325-ac3a-4798-8f40-604ad88b055a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("803a7e45-5ada-48fc-b9c0-9eba06a30faf",
	"00000000-0000-0000-0000-000000000000",
	'TagStateTransitionTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateTransitionTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("803a7e45-5ada-48fc-b9c0-9eba06a30faf",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9f5c7b92-e9d3-4729-bc21-e3521ae85d31",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateTransitionTracingOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling state transition tracing for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StateTrace = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c34f4ff0-564e-48f6-a43d-551e318a0170",
	"9f5c7b92-e9d3-4729-bc21-e3521ae85d31",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9f5c7b92-e9d3-4729-bc21-e3521ae85d31",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ecfe13bf-9466-4ba6-aaf9-09c843822a6d",
	"00000000-0000-0000-0000-000000000000",
	'TagActionStatementTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkActionStatementTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("ecfe13bf-9466-4ba6-aaf9-09c843822a6d",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0c73e873-8e1c-482e-b3a5-887c58d4f4bf",
	"00000000-0000-0000-0000-000000000000",
	'MarkActionStatementTracingOn',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StmtTrace = true;
  T::print(s:"Action statement tracing enabled for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d6e23e71-63c6-456e-a357-e7589b521cae",
	"0c73e873-8e1c-482e-b3a5-887c58d4f4bf",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("0c73e873-8e1c-482e-b3a5-887c58d4f4bf",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1d2ea3f8-e594-4cbd-b17a-2e9aaa9cc4ea",
	"00000000-0000-0000-0000-000000000000",
	'MarkMessageTracingOn',
	'',
	'//
//============================================================================
component_name = param.component_name;
port_name = param.port_name;
message_name = param.message_name;
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == port_name );
if ( ( "" == port_name ) or ( "*" == port_name ) )
  select many te_pos related by te_cs->TE_PO[R2005];
end if;
select many te_macts related by te_pos->TE_MACT[R2006] where ( selected.MessageName == message_name );
if ( ( "" == message_name ) or ( "*" == message_name ) )
  select many te_macts related by te_pos->TE_MACT[R2006];
end if;
for each te_mact in te_macts
  te_mact.trace = true;
end for;
if ( empty te_macts )
  T::print(s:"Warning:  No messages found to trace for ${component_name}::${port_name}::${message_name}.");
else
  T::print(s:"Message tracing enabled for ${component_name}::${port_name}::${message_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("0af54f13-ea33-4288-87b2-cdda6e8105c0",
	"1d2ea3f8-e594-4cbd-b17a-2e9aaa9cc4ea",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f8a6e9e1-fc53-4897-b078-c8e34afe52b3",
	"1d2ea3f8-e594-4cbd-b17a-2e9aaa9cc4ea",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0af54f13-ea33-4288-87b2-cdda6e8105c0",
	'');
INSERT INTO S_SPARM
	VALUES ("685a9c43-b324-42f1-b474-8b761ced2599",
	"1d2ea3f8-e594-4cbd-b17a-2e9aaa9cc4ea",
	'message_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f8a6e9e1-fc53-4897-b078-c8e34afe52b3",
	'');
INSERT INTO PE_PE
	VALUES ("1d2ea3f8-e594-4cbd-b17a-2e9aaa9cc4ea",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("22147617-c672-417f-a658-b17d008a2ce0",
	"00000000-0000-0000-0000-000000000000",
	'TagEmptyHandleDetectionOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkEmptyHandleDetectionOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("22147617-c672-417f-a658-b17d008a2ce0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("39e07acd-047c-4519-b9b9-a0cc989c4cc9",
	"00000000-0000-0000-0000-000000000000",
	'MarkEmptyHandleDetectionOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling detection of empty handles for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.DetectEmpty = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c3d87712-4b08-4b94-aea6-1751b02d66b0",
	"39e07acd-047c-4519-b9b9-a0cc989c4cc9",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("39e07acd-047c-4519-b9b9-a0cc989c4cc9",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ab60dbc9-c91e-4c5e-8de8-17eefea6fb79",
	"00000000-0000-0000-0000-000000000000",
	'TagFirstPassOptimizationsOff',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFirstPassOptimizationsOff( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("ab60dbc9-c91e-4c5e-8de8-17eefea6fb79",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c3e7ab5e-adfc-4e63-94ff-578d52870254",
	"00000000-0000-0000-0000-000000000000",
	'MarkFirstPassOptimizationsOff',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.OptDisabled = true;
  T::print(s:"Code optimizations DISABLED for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c0a3ce07-69c7-4d3c-845b-029daf1e17ea",
	"c3e7ab5e-adfc-4e63-94ff-578d52870254",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c3e7ab5e-adfc-4e63-94ff-578d52870254",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea461ece-ae13-478e-8304-62ba9a977240",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionCommentBlocksEnabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionCommentBlocksEnabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("ea461ece-ae13-478e-8304-62ba9a977240",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("effaf118-8ac5-4bb6-8c6f-953c040152bb",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionCommentBlocksEnabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.RawComments = true;
  T::print(s:"State action sematics will be included as comments for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("9038a831-dfa9-453f-86df-216ffce2ce70",
	"effaf118-8ac5-4bb6-8c6f-953c040152bb",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("effaf118-8ac5-4bb6-8c6f-953c040152bb",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d2604f52-edbf-49ea-8937-29d18de710f0",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionStatementCommentsDisabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionStatementCommentsDisabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("d2604f52-edbf-49ea-8937-29d18de710f0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a90e37a2-2a69-49e6-aab2-4439c946c322",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionStatementCommentsDisabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.CodeComments = false;
  T::print(s:"State action statement level comments disabled for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3dd89bd8-2271-4f2b-ac27-889d4f503f5d",
	"a90e37a2-2a69-49e6-aab2-4439c946c322",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a90e37a2-2a69-49e6-aab2-4439c946c322",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("63899c41-3236-4c1a-8f67-6c598e080e44",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionVariableNamesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("63899c41-3236-4c1a-8f67-6c598e080e44",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3ffe60ce-2c1e-4f66-91fa-ef690a8f0b6f",
	"00000000-0000-0000-0000-000000000000",
	'TagVerboseReflexivePhrasesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("3ffe60ce-2c1e-4f66-91fa-ef690a8f0b6f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3a65e17e-1bc7-4b25-bff8-64e8834b334c",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiring',
	'',
	'//
//
// Mark a port as having a component attached even though the component
// is not present in the model.
//
// .invoke MarkPortWiring( <home_component>, <home_port>, <foreign_component>, <foreign_port> )
// where:
//  <home_component> is the local component name.
//  <home_port> is the local port name.
//  <foreign_component> is the name of the component on the other side of
//                      the interface.
//  <foreign_port> is the name of the port on the other side of the interface.
//
//
home_component = param.home_component;
home_port = param.home_port;
foreign_component = param.foreign_component;
foreign_port = param.foreign_port;
select many te_cs from instances of TE_C where ( ( selected.Name == home_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == home_port );
::MarkPortWiringForPort( te_pos:te_pos, component:foreign_component, port:foreign_port );
select many te_cs from instances of TE_C where ( ( selected.Name == foreign_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == foreign_port );
::MarkPortWiringForPort( te_pos:te_pos, component:home_component, port:home_port );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("89cbcaf4-76d2-44c7-9d07-e527b78334c2",
	"3a65e17e-1bc7-4b25-bff8-64e8834b334c",
	'home_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("354b05d1-6df1-436e-8636-692e29a804aa",
	"3a65e17e-1bc7-4b25-bff8-64e8834b334c",
	'home_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"89cbcaf4-76d2-44c7-9d07-e527b78334c2",
	'');
INSERT INTO S_SPARM
	VALUES ("2df7d15c-e4f3-47f3-8bfe-266fb5492ce8",
	"3a65e17e-1bc7-4b25-bff8-64e8834b334c",
	'foreign_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"354b05d1-6df1-436e-8636-692e29a804aa",
	'');
INSERT INTO S_SPARM
	VALUES ("73c1f86e-8abb-4d2b-9d8d-326e5fb718bd",
	"3a65e17e-1bc7-4b25-bff8-64e8834b334c",
	'foreign_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2df7d15c-e4f3-47f3-8bfe-266fb5492ce8",
	'');
INSERT INTO PE_PE
	VALUES ("3a65e17e-1bc7-4b25-bff8-64e8834b334c",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0a966ff2-dffb-4888-8c6d-7ad93f0d3ac6",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiringForPort',
	'',
	'//
te_pos = param.te_pos;
component = param.component;
port = param.port;
for each te_po in te_pos
  select many te_iirs related by te_po->TE_IIR[R2080];
  for each te_iir in te_iirs
    if ( te_po.Provision )
      select many sibling_te_iirs related by te_iir->TE_IIR[R2081.''provides or is delegated''];
      if ( empty sibling_te_iirs )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    else
      select one sibling_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''];
      if ( empty sibling_te_iir )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("cd8a2a02-be37-4398-95aa-6589a4c3dfc7",
	"0a966ff2-dffb-4888-8c6d-7ad93f0d3ac6",
	'te_pos',
	"eafae685-f05e-4f3d-ad38-35b2a8c9b758",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("eafae685-f05e-4f3d-ad38-35b2a8c9b758",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Extended Port>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/extensions/Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("3c64adff-3a75-4870-afa9-78631756d516",
	"0a966ff2-dffb-4888-8c6d-7ad93f0d3ac6",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cd8a2a02-be37-4398-95aa-6589a4c3dfc7",
	'');
INSERT INTO S_SPARM
	VALUES ("d44b1dea-6462-4a06-bda8-1d150c57336e",
	"0a966ff2-dffb-4888-8c6d-7ad93f0d3ac6",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3c64adff-3a75-4870-afa9-78631756d516",
	'');
INSERT INTO PE_PE
	VALUES ("0a966ff2-dffb-4888-8c6d-7ad93f0d3ac6",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c4096821-bf43-4909-8205-a5aa9b4f670a",
	"00000000-0000-0000-0000-000000000000",
	'TagDispatchFlavor',
	'',
	'//============================================================================
// $RCSfile: m.event.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) event.clr file.
//============================================================================
//
//
//============================================================================
// Choose the type of dispatcher to run.  Zero is the default.
// Selecting 2 will provide a single system level event dispatcher.
//============================================================================
flavor = param.flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("dcd4045e-3d22-4376-8c2b-26a147373185",
	"c4096821-bf43-4909-8205-a5aa9b4f670a",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c4096821-bf43-4909-8205-a5aa9b4f670a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a70d60f8-4ad7-4ab8-bd67-413dc2457775",
	"00000000-0000-0000-0000-000000000000",
	'TagPriorityEvent',
	'',
	'//
//============================================================================
// Color event to higher than default priority.
//============================================================================
evt_label = param.evt_label;
priority_value = param.priority_value;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPriorityEvent( component_name:te_c.Name, evt_label:evt_label, priority_value:priority_value );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("02b37658-bbeb-44c6-a953-d30e8c1a2f5e",
	"a70d60f8-4ad7-4ab8-bd67-413dc2457775",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2c3f2923-5a49-4e95-81c7-2987cb2a5942",
	"a70d60f8-4ad7-4ab8-bd67-413dc2457775",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"02b37658-bbeb-44c6-a953-d30e8c1a2f5e",
	'');
INSERT INTO PE_PE
	VALUES ("a70d60f8-4ad7-4ab8-bd67-413dc2457775",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5b810b5d-1917-435b-9bc7-18a8490f2b46",
	"00000000-0000-0000-0000-000000000000",
	'MarkPriorityEvent',
	'',
	'component_name = param.component_name;
evt_label = param.evt_label;
priority_value = param.priority_value;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  //
  // Check for legal range on input priority.
  //
  if ( ( priority_value > 255 ) or ( priority_value < 0 ) )
    msg = "ERROR:  Priority ($t{priority_value}) out of legal range (0-255).";
  end if;
  //
  // Store the priority of the event in an attribute.
  //
  select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  if ( empty sm_evt )
    select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  end if;
  if ( not_empty sm_evt )
    //
    // We are not allowing prioritized polymorphic events... yet.
    //
    select one sm_pevt related by sm_evt->SM_PEVT[R525];
    if ( not_empty sm_pevt )
      msg = "ERROR:  Prioritized Polymorphic Event (${evt_label}) component ${te_c.Name}";
      msg = msg + "\nPriority Polys are not supported.";
    end if;
    select one te_evt related by sm_evt->TE_EVT[R2036];
    te_evt.Priority = priority_value;
    msg = "Event ${sm_evt.Drv_Lbl}:${sm_evt.Mning} marked as priority event.";
  else
    msg = "ERROR:  Event (${evt_label}) not found in component ${te_c.Name}";
  end if;
  msg = msg + " => TagPriorityEvent( ${evt_label}, $t{priority_value} )";
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("788670c8-c9a2-40e7-9d75-7a48c83fedc5",
	"5b810b5d-1917-435b-9bc7-18a8490f2b46",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9af2bfe0-0668-4efe-bf1e-51b65fd08195",
	"5b810b5d-1917-435b-9bc7-18a8490f2b46",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"788670c8-c9a2-40e7-9d75-7a48c83fedc5",
	'');
INSERT INTO S_SPARM
	VALUES ("9e1cc1d5-370f-4f63-b5de-d898ace86879",
	"5b810b5d-1917-435b-9bc7-18a8490f2b46",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"9af2bfe0-0668-4efe-bf1e-51b65fd08195",
	'');
INSERT INTO PE_PE
	VALUES ("5b810b5d-1917-435b-9bc7-18a8490f2b46",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ca57e8dc-9f99-42dc-81bd-00536e51fe5a",
	"00000000-0000-0000-0000-000000000000",
	'EnableTasking',
	'',
	'//============================================================================
// $RCSfile: m.system.arc,v $
//
// Description:
// System level coloring functions are found here.
// Notice that the colors that would normally update TE_SYS are active.
//============================================================================
//
//
//============================================================================
// Enable tasking/threading.
//============================================================================
flavor = param.flavor;
serialize = param.serialize;
number_of_threads = param.number_of_threads;
//
T::print(s:"EnableTasking( ${flavor}, ${serialize}, $t{number_of_threads} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
  tm_thread.extra_initialization = "";
end if;
tm_thread.number_of_threads = number_of_threads;
if ( T::l(s:serialize) == "serialize" )
  tm_thread.serialize = true;
else
  tm_thread.serialize = false;
end if;
if ( ( ( ( "Nucleus" == flavor ) or ( "POSIX" == flavor ) ) or ( ( "OSX" == flavor ) or ( "Windows" == flavor ) ) ) or ( ( "AUTOSAR" == flavor ) or ( "SystemC" == flavor ) ) )
  tm_thread.flavor = flavor;
  if ( "SystemC" == flavor )
    // SystemC uses a single thread inside each component.
    // So, no need for an array of threads.
    tm_thread.number_of_threads = 1;
    tm_thread.enabled = false;
  else
    tm_thread.enabled = true;
  end if;
else
  T::print(s:"ERROR:  system.mark:EnableTasking has incorrect tasking/threading type:${flavor}.\n");
  T::exit(i:100);
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("366b3f69-bbed-4ee3-865c-8517a2e3371c",
	"ca57e8dc-9f99-42dc-81bd-00536e51fe5a",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2ee33e62-5373-480b-8eb5-7e8e21ebb802",
	"ca57e8dc-9f99-42dc-81bd-00536e51fe5a",
	'serialize',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"366b3f69-bbed-4ee3-865c-8517a2e3371c",
	'');
INSERT INTO S_SPARM
	VALUES ("8dba7fbe-ae78-44a4-bd49-8bc398cdd6ab",
	"ca57e8dc-9f99-42dc-81bd-00536e51fe5a",
	'number_of_threads',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"2ee33e62-5373-480b-8eb5-7e8e21ebb802",
	'');
INSERT INTO PE_PE
	VALUES ("ca57e8dc-9f99-42dc-81bd-00536e51fe5a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("606dd056-7bb3-4515-8f0e-a74710b57b23",
	"00000000-0000-0000-0000-000000000000",
	'SetTaskPriority',
	'',
	'//
//============================================================================
// Establish task priority.
//============================================================================
task_number = param.task_number;
priority = param.priority;
T::print(s:"SetTaskPriority( $t{task_number}, ${priority} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
end if;
tm_thread.extra_initialization = tm_thread.extra_initialization + "  xtUML_task_priorities[ $t{task_number} ] = ${priority};\n";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3616c459-38ff-4a57-949c-ae1ea9e24359",
	"606dd056-7bb3-4515-8f0e-a74710b57b23",
	'task_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d6feef94-3d93-474f-80aa-656162b2b0b6",
	"606dd056-7bb3-4515-8f0e-a74710b57b23",
	'priority',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3616c459-38ff-4a57-949c-ae1ea9e24359",
	'');
INSERT INTO PE_PE
	VALUES ("606dd056-7bb3-4515-8f0e-a74710b57b23",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a69ef887-445f-459a-af62-c2942f34aef0",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumStringLength',
	'',
	'//
//============================================================================
max_len = param.max_len;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxStringLen = max_len;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5eb781a5-7d1d-4679-9962-da096bd9a4b9",
	"a69ef887-445f-459a-af62-c2942f34aef0",
	'max_len',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a69ef887-445f-459a-af62-c2942f34aef0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("67fb3185-5ba6-4870-a67a-6a1ab2d1b518",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumRelationshipExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxRelExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("eb697c84-9826-4440-aa45-d213ed5405ae",
	"67fb3185-5ba6-4870-a67a-6a1ab2d1b518",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("67fb3185-5ba6-4870-a67a-6a1ab2d1b518",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ee9d9b0e-7728-41b4-ad20-3cc1fd410033",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelectionExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelectExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("817d3c2e-f52f-4629-88c8-9450efa18790",
	"ee9d9b0e-7728-41b4-ad20-3cc1fd410033",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ee9d9b0e-7728-41b4-ad20-3cc1fd410033",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a4e0d136-bb75-442c-8c74-6d26c8e2043b",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1bcb64c9-4757-4f35-86c5-bf6093c28c9c",
	"a4e0d136-bb75-442c-8c74-6d26c8e2043b",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a4e0d136-bb75-442c-8c74-6d26c8e2043b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f9d4a97b-f286-436b-a08e-c099acb0cb15",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumNonSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxNonSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d3a7c5b5-960f-4ae2-9163-5499ea77c66e",
	"f9d4a97b-f286-436b-a08e-c099acb0cb15",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f9d4a97b-f286-436b-a08e-c099acb0cb15",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9352d2fd-fb8c-42a2-b0af-33f15c2b2d85",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumPendingOoaTimers',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxTimers = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("cb586642-0e36-4125-94c2-e1c2839992b5",
	"9352d2fd-fb8c-42a2-b0af-33f15c2b2d85",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9352d2fd-fb8c-42a2-b0af-33f15c2b2d85",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e4d17354-2031-4b6e-8921-4baec2daca75",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumInterleavedBridges',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridges = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("8bd2d785-619c-470f-b3ab-fbf341dec887",
	"e4d17354-2031-4b6e-8921-4baec2daca75",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e4d17354-2031-4b6e-8921-4baec2daca75",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f0e912b8-cc5c-440e-b58d-897ff4fdc026",
	"00000000-0000-0000-0000-000000000000",
	'TagInterleavedBridgeDataSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridgeDataSize = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("b2a33dc6-a074-4533-b9db-1cf6e405b4cc",
	"f0e912b8-cc5c-440e-b58d-897ff4fdc026",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f0e912b8-cc5c-440e-b58d-897ff4fdc026",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9c77ae68-565f-4107-80e1-1aa23fd5f661",
	"00000000-0000-0000-0000-000000000000",
	'TagCollectionsFlavor',
	'',
	'//
//============================================================================
// Use doubly linked lists for collections.  This speeds up deletes.
//============================================================================
collections_flavor = param.collections_flavor;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.CollectionsFlavor = collections_flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d687334f-47bd-4b8d-afd4-16e799ff6701",
	"9c77ae68-565f-4107-80e1-1aa23fd5f661",
	'collections_flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9c77ae68-565f-4107-80e1-1aa23fd5f661",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f02226e1-55d0-45cb-b743-a91cd2461d9d",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistenceCacheDepth',
	'',
	'//
//============================================================================
// Mark Depth of Persistence Cache Queue
//
// This color is used to specify the maximum number of instances and
// links that can be queued waiting to be flushed to non-volatile
// storage (NVS).  As instances and links become "dirty" they get
// queued to NVS.  When Persist::Commit is called this queue is flushed.
//
// MarkPersistenceCacheDepth( instance_depth, link_depth )
//
// Where the input parameter(s) are:
//   instance_depth = the integer depth of the linked list of instances
//   link_depth = the integer depth of the linked list of persistent links
//============================================================================
instance_depth = param.instance_depth;
link_depth = param.link_depth;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.PersistInstanceCacheDepth = instance_depth;
tm_systag.PersistLinkCacheDepth = link_depth;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a3c93494-e45c-4ca5-9f67-f23a872bbf14",
	"f02226e1-55d0-45cb-b743-a91cd2461d9d",
	'instance_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d3de6b05-8f61-409b-9540-1a9f9dc0ca34",
	"f02226e1-55d0-45cb-b743-a91cd2461d9d",
	'link_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a3c93494-e45c-4ca5-9f67-f23a872bbf14",
	'');
INSERT INTO PE_PE
	VALUES ("f02226e1-55d0-45cb-b743-a91cd2461d9d",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed85c076-9fb1-4206-8d61-782aa71d895b",
	"00000000-0000-0000-0000-000000000000",
	'TagDynamicMemoryAllocationOn',
	'',
	'//
//============================================================================
units_to_allocate = param.units_to_allocate;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.UnitsToDynamicallyAllocate = units_to_allocate;
if ( tm_systag.UnitsToDynamicallyAllocate < 1 )
  tm_systag.UnitsToDynamicallyAllocate = 1;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("69ba8eea-3b28-4ad2-8827-5c2ff86808ca",
	"ed85c076-9fb1-4206-8d61-782aa71d895b",
	'units_to_allocate',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ed85c076-9fb1-4206-8d61-782aa71d895b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2315890f-3482-4729-bbbb-f8576d9c805b",
	"00000000-0000-0000-0000-000000000000",
	'TagInstanceLoading',
	'',
	'//
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.InstanceLoading = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("2315890f-3482-4729-bbbb-f8576d9c805b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ddd7b33c-bd04-4622-b2b8-5f0ec9c98409",
	"00000000-0000-0000-0000-000000000000",
	'VFBEnable',
	'',
	'//
//============================================================================
// Enable Virtual Function Bus (VFB) for AUTOSAR.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.VFB = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("ddd7b33c-bd04-4622-b2b8-5f0ec9c98409",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("94175b27-21a9-4123-ab3f-4e50eb036cac",
	"00000000-0000-0000-0000-000000000000",
	'MarkStructuredMessaging',
	'',
	'//
//============================================================================
// Turn on structured inter-component message passing.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.StructuredMessaging = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("94175b27-21a9-4123-ab3f-4e50eb036cac",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("26642a8c-e38e-4139-84e6-f15f8de9d450",
	"00000000-0000-0000-0000-000000000000",
	'MarkNetworkSockets',
	'',
	'//
//============================================================================
// Use Network Sockets to send messages between components.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.NetworkSockets = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("26642a8c-e38e-4139-84e6-f15f8de9d450",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a3ff183e-8f68-4731-8daf-bbee575a8a23",
	"00000000-0000-0000-0000-000000000000",
	'TM_SYSTAG_select',
	'',
	'//
select any tm_systag from instances of TM_SYSTAG;
if ( empty tm_systag )
  create object instance tm_systag of TM_SYSTAG;
  tm_systag.MaxStringLen = 32;
  tm_systag.PersistInstanceCacheDepth = 128;
  tm_systag.PersistLinkCacheDepth = 128;
  tm_systag.SystemCPortsType = "sc_interface";
end if;
return tm_systag;
',
	"fef0b916-06a3-4b79-bfcf-25214d2c2670",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("a3ff183e-8f68-4731-8daf-bbee575a8a23",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("fef0b916-06a3-4b79-bfcf-25214d2c2670",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Tags>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/extensions/Translation Marking/Translation Marking.xtuml');
INSERT INTO S_SYNC
	VALUES ("edbedcf9-3541-4fc7-a925-02361e7b7c97",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemConfigurationPackage',
	'',
	'//
//============================================================================
// Mark a package as containing the system configuration.  Code will be
// generated for components contained in this package (and referred to
// from this package).
//============================================================================
package_name = param.package_name;
select any tm_build from instances of TM_BUILD;
if ( empty tm_build )
  create object instance tm_build of TM_BUILD;
else
  T::print(s:"Warning:  Re-marking system configuration.  Last configuration marked will be built.");
end if;
tm_build.package_to_build = package_name;
tm_build.package_obj_name = package_name + "_sys";
tm_build.package_inst_name = package_name + "_top";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("bf23e170-5d0e-4211-b2dc-9122850221e6",
	"edbedcf9-3541-4fc7-a925-02361e7b7c97",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("edbedcf9-3541-4fc7-a925-02361e7b7c97",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4e2f6c53-f839-4f6f-b5d1-17e57c6ad016",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemCPortType',
	'',
	'//
//============================================================================
// Enable Channel binding instead of Signal Binding.
//============================================================================
port_type = param.port_type;
r = ::TM_SYSTAG_select();
tm_systag = r;
if ( ( ( port_type == "TLM" ) or ( port_type == "BitLevelSignals" ) ) or ( port_type == "sc_interface" ) )
  tm_systag.SystemCPortsType = port_type;
else
  T::print(s:"Warning:  Unrecognized SystemC Port Type(${port_type}). Please choose either TLM, BitLevelSignals or sc_interface. Default configuration will be used.");
  tm_systag.SystemCPortsType = "sc_interface";
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("cc40d606-d1c6-4def-a696-6aef9f7769d5",
	"4e2f6c53-f839-4f6f-b5d1-17e57c6ad016",
	'port_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4e2f6c53-f839-4f6f-b5d1-17e57c6ad016",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("03bdbb4e-1276-4480-a673-9d31afc85a34",
	"00000000-0000-0000-0000-000000000000",
	'MarkAllPortsPolymorphic',
	'',
	'//
//============================================================================
// Force all ports to be polymorphic (where a component implements the same 
// interface going in the same direction more than once). 
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.AllPortsPoly = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("03bdbb4e-1276-4480-a673-9d31afc85a34",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("065b9cfd-e623-43cc-9045-c74372f6e05f",
	"00000000-0000-0000-0000-000000000000",
	'EnableJavaMode',
	'',
	'//
//============================================================================
// Enable Java mode for mcmc
//============================================================================
select any te_target from instances of TE_TARGET;
if ( not_empty te_target )
  te_target.language = "Java";
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("065b9cfd-e623-43cc-9045-c74372f6e05f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("37c85f1f-760c-4f77-846a-ffde28165098",
	"00000000-0000-0000-0000-000000000000",
	'mark_all',
	'',
	'//
pass = param.pass;
f = param.f;
p1 = param.p1;
p2 = param.p2;
p3 = param.p3;
p4 = param.p4;
p5 = param.p5;
if ( "1" == pass )
  // bridge
  if ( "WireSynchServiceOoaBridge" == f )
    // WireSynchServiceOoaBridge("initiant","ee_key_letters","recipient")
    ::WireSynchServiceOoaBridge( initiant:p1, ee_key_letters:p2, recipient:p3 );
  elif ( "WireRealizeExternalEntity" == f )
    // WireRealizeExternalEntity("a","b","c","d","e")
    ::WireRealizeExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "WireRealizedExternalEntity" == f )
    // WireRealizedExternalEntity("a","b","c","d","e")
    ::WireRealizedExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "TagSyncServiceSafeForInterrupts" == f )
    // TagSyncServiceSafeForInterrupts("component_name","function_name")
    ::TagSyncServiceSafeForInterrupts( component_name:p1, function_name:p2 );
    // datatype
  elif ( "TagDataTypePrecision" == f )
    // TagDataTypePrecision("component_name","dt_name","tagged_name","initial_value")
    ::TagDataTypePrecision( component_name:p1, dt_name:p2, tagged_name:p3, initial_value:p4 );
  elif ( "MapDataTypeAsPointer" == f )
    // MapDataTypeAsPointer("component_name","dt_name","pointer_type","include_file")
    ::MapDataTypeAsPointer( component_name:p1, dt_name:p2, pointer_type:p3, include_file:p4 );
  elif ( "TagEnumeratorDiscreteValue" == f )
    // TagEnumeratorDiscreteValue("component_name","enumeration","enumerator","value")
    ::TagEnumeratorDiscreteValue( component_name:p1, enumeration:p2, enumerator:p3, value:p4 );
  elif ( "TagUninitializedEnumerationValue" == f )
    // TagUninitializedEnumerationValue("component_name","enumeration","value")
    ::TagUninitializedEnumerationValue( component_name:p1, enumeration:p2, value:p3 );
  elif ( "AssignDirectToUDTPackage" == f )
    // AssignDirectToUDTPackage("package_name")
    ::AssignDirectToUDTPackage( package_name:p1 );
    // system
  elif ( "EnableJavaMode" == f )
    ::EnableJavaMode();
  elif ( "EnableTasking" == f )
    // EnableTasking("flavor","serialize","number_of_threads":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::EnableTasking( flavor:p1, serialize:p2, number_of_threads:i3 );
  elif ( "SetTaskPriority" == f )
    // SetTaskPriority("task_number":integer"priority")
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::SetTaskPriority( task_number:i1, priority:p2 );
  elif ( "TagMaximumStringLength" == f )
    // TagMaximumStringLength("max_len":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumStringLength( max_len:i1 );
  elif ( "TagMaximumRelationshipExtentSize" == f )
    // TagMaximumRelationshipExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumRelationshipExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelectionExtentSize" == f )
    // TagMaximumSelectionExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelectionExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelfDirectedEvents" == f )
    // TagMaximumSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumNonSelfDirectedEvents" == f )
    // TagMaximumNonSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumNonSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumPendingOoaTimers" == f )
    // TagMaximumPendingOoaTimers("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumPendingOoaTimers( user_specified_size:i1 );
  elif ( "TagMaximumInterleavedBridges" == f )
    // TagMaximumInterleavedBridges("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumInterleavedBridges( user_specified_size:i1 );
  elif ( "TagInterleavedBridgeDataSize" == f )
    // TagInterleavedBridgeDataSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagInterleavedBridgeDataSize( user_specified_size:i1 );
  elif ( "TagCollectionsFlavor" == f )
    // TagCollectionsFlavor("collections_flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagCollectionsFlavor( collections_flavor:i1 );
  elif ( "MarkPersistenceCacheDepth" == f )
    // MarkPersistenceCacheDepth("instance_depth":integer"link_depth":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::MarkPersistenceCacheDepth( instance_depth:i1, link_depth:i2 );
  elif ( "TagDynamicMemoryAllocationOn" == f )
    // TagDynamicMemoryAllocationOn("units_to_allocate":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDynamicMemoryAllocationOn( units_to_allocate:i1 );
  elif ( "TagInstanceLoading" == f )
    ::TagInstanceLoading();
  elif ( "VFBEnable" == f )
    ::VFBEnable();
  elif ( "MarkStructuredMessaging" == f )
    ::MarkStructuredMessaging();
  elif ( "MarkNetworkSockets" == f )
    ::MarkNetworkSockets();
  elif ( "MarkSystemConfigurationPackage" == f )
    // MarkSystemConfigurationPackage("package_name")
    ::MarkSystemConfigurationPackage( package_name:p1 );
  elif ( "MarkSystemCPortType" == f )
    // MarkSystemCPortType("port_type")
    ::MarkSystemCPortType( port_type:p1 );
  elif ( "MarkAllPortsPolymorphic" == f )
    ::MarkAllPortsPolymorphic();
    // component
  elif ( "MarkAsChannel" == f )
    // MarkAsChannel("package_name","component_name","inc_file")
    ::MarkAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentAsChannel" == f )
    // MarkComponentAsChannel("package_name","component_name","inc_file")
    ::MarkComponentAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentWithTemplate" == f )
    // MarkComponentWithTemplate("package_name","component_name")
    ::MarkComponentWithTemplate( package_name:p1, component_name:p2 );
  elif ( "MarkInterfaceWithTemplate" == f )
    // MarkInterfaceWithTemplate("package_name","interface_name")
    ::MarkInterfaceWithTemplate( package_name:p1, interface_name:p2 );
  elif ( "AddTemplateParameter" == f )
    // AddTemplateParameter("package_name","component_name","type_name","variable_name","default_value")
    ::AddTemplateParameter( package_name:p1, component_name:p2, type_name:p3, variable_name:p4, default_value:p5 );
  elif ( "SetTemplateParameter" == f )
    // SetTemplateParameter("package_name","instance","variable_name","value")
    ::SetTemplateParameter( package_name:p1, instance:p2, variable_name:p3, value:p4 );
  elif ( "SetTPV" == f )
    // CDS - not supported here
    // SetTPV("package_name","parent_component","component","classifier_name","port","variable_name","value")
    ::SetTPV( package_name:p1, parent_component:p2, component:p3, classifier_name:p4, port:p5, variable_name:"", value:"" );
  elif ( "MarkInterfacePrefix" == f )
    // MarkInterfacePrefix("provided_port","required_port","channel")
    ::MarkInterfacePrefix( provided_port:p1, required_port:p2, channel:p3 );
  elif ( "MarkComponentAsRealized" == f )
    // MarkComponentAsRealized("package_name","component_name","inc_file")
    ::MarkComponentAsRealized( package_name:p1, component_name:p2, inc_file:p3 );
  else
    // not in this pass
  end if;
else
  // class
  if ( "TagSystemObjectDefaultExtentSize" == f )
    // TagSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "MarkSystemObjectDefaultExtentSize" == f )
    // MarkSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::MarkSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "TagObjectExtentSize" == f )
    // TagObjectExtentSize("obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagObjectExtentSize( obj_key_letters:p1, extent_size:i2 );
  elif ( "MarkObjectExtentSize" == f )
    // MarkObjectExtentSize("component_name","obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkObjectExtentSize( component_name:p1, obj_key_letters:p2, extent_size:i3 );
  elif ( "TagTransformerGeneration" == f )
    // TagTransformerGeneration("obj_key_letters","transformer_name")
    ::TagTransformerGeneration( obj_key_letters:p1, transformer_name:p2 );
  elif ( "TagClassOperationTranslationOff" == f )
    // TagClassOperationTranslationOff("obj_key_letters","op_name")
    ::TagClassOperationTranslationOff( obj_key_letters:p1, op_name:p2 );
  elif ( "MarkClassOperationTranslationOff" == f )
    // MarkClassOperationTranslationOff("component_name","obj_key_letters","op_name")
    ::MarkClassOperationTranslationOff( component_name:p1, obj_key_letters:p2, op_name:p3 );
  elif ( "TagObjectTraceOff" == f )
    // TagObjectTraceOff("obj_key_letters")
    ::TagObjectTraceOff( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOff" == f )
    // MarkObjectTraceOff("component_name","obj_key_letters")
    ::MarkObjectTraceOff( component_name:p1, obj_key_letters:p2 );
  elif ( "TagObjectTraceOn" == f )
    // TagObjectTraceOn("obj_key_letters")
    ::TagObjectTraceOn( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOn" == f )
    // MarkObjectTraceOn("component_name","obj_key_letters")
    ::MarkObjectTraceOn( component_name:p1, obj_key_letters:p2 );
  elif ( "TagPEIsDefinedInData" == f )
    // TagPEIsDefinedInData("ss_prefix","obj_key_letters")
    ::TagPEIsDefinedInData( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPEIsDefinedInData" == f )
    // MarkPEIsDefinedInData("component_name","ss_prefix","obj_key_letters")
    ::MarkPEIsDefinedInData( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagStaticInstancePopulation" == f )
    // TagStaticInstancePopulation("ss_prefix","obj_key_letters")
    ::TagStaticInstancePopulation( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkStaticInstancePopulation" == f )
    // MarkStaticInstancePopulation("component_name","ss_prefix","obj_key_letters")
    ::MarkStaticInstancePopulation( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagReadOnly" == f )
    // TagReadOnly("ss_prefix","obj_key_letters")
    ::TagReadOnly( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkReadOnly" == f )
    // MarkReadOnly("component_name","ss_prefix","obj_key_letters")
    ::MarkReadOnly( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagPersistentClass" == f )
    // TagPersistentClass("ss_prefix","obj_key_letters")
    ::TagPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPersistentClass" == f )
    // MarkPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkPersistentClass( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagNonPersistentClass" == f )
    // TagNonPersistentClass("ss_prefix","obj_key_letters")
    ::TagNonPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkNonPersistentClass" == f )
    // MarkNonPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkNonPersistentClass( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "MapClassToTask" == f )
    // MapClassToTask("ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MapClassToTask( ss_prefix:p1, obj_key_letters:p2, task:i3 );
  elif ( "MarkClassToTask" == f )
    // MarkClassToTask("component_name","ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p4 );
    i4 = r;
    ::MarkClassToTask( component_name:p1, package_name:p2, obj_key_letters:p3, task:i4 );
    // domain
  elif ( "TagFunctionTranslationOff" == f )
    // TagFunctionTranslationOff("function_name")
    ::TagFunctionTranslationOff( function_name:p1 );
  elif ( "MarkFunctionTranslationOff" == f )
    // MarkFunctionTranslationOff("component_name","function_name")
    ::MarkFunctionTranslationOff( component_name:p1, function_name:p2 );
  elif ( "TagInitializationFunction" == f )
    // TagInitializationFunction("function_name")
    ::TagInitializationFunction( function_name:p1 );
  elif ( "MarkInitializationFunction" == f )
    // MarkInitializationFunction("component_name","function_name")
    ::MarkInitializationFunction( component_name:p1, function_name:p2 );
  elif ( "TagExcludeObjectFromCodeGen" == f )
    // TagExcludeObjectFromCodeGen("obj_key_letters")
    ::TagExcludeObjectFromCodeGen( obj_key_letters:p1 );
  elif ( "MarkExcludeObjectFromCodeGen" == f )
    // MarkExcludeObjectFromCodeGen("component_name","obj_key_letters")
    ::MarkExcludeObjectFromCodeGen( component_name:p1, obj_key_letters:p2 );
  elif ( "TagExcludeSubsystemFromCodeGen" == f )
    // TagExcludeSubsystemFromCodeGen("subsystem_name")
    ::TagExcludeSubsystemFromCodeGen( subsystem_name:p1 );
  elif ( "MarkExcludeSubsystemFromCodeGen" == f )
    // MarkExcludeSubsystemFromCodeGen("component_name","subsystem_name")
    ::MarkExcludeSubsystemFromCodeGen( component_name:p1, package_name:p2 );
  elif ( "TagStateTransitionTracingOn" == f )
    ::TagStateTransitionTracingOn();
  elif ( "MarkStateTransitionTracingOn" == f )
    // MarkStateTransitionTracingOn("component_name")
    ::MarkStateTransitionTracingOn( component_name:p1 );
  elif ( "TagActionStatementTracingOn" == f )
    ::TagActionStatementTracingOn();
  elif ( "MarkActionStatementTracingOn" == f )
    // MarkActionStatementTracingOn("component_name")
    ::MarkActionStatementTracingOn( component_name:p1 );
  elif ( "MarkMessageTracingOn" == f )
    // MarkMessageTracingOn("component_name","port_name","message_name")
    ::MarkMessageTracingOn( component_name:p1, port_name:p2, message_name:p3 );
  elif ( "TagEmptyHandleDetectionOn" == f )
    ::TagEmptyHandleDetectionOn();
  elif ( "MarkEmptyHandleDetectionOn" == f )
    // MarkEmptyHandleDetectionOn("component_name")
    ::MarkEmptyHandleDetectionOn( component_name:p1 );
  elif ( "TagFirstPassOptimizationsOff" == f )
    ::TagFirstPassOptimizationsOff();
  elif ( "MarkFirstPassOptimizationsOff" == f )
    // MarkFirstPassOptimizationsOff("component_name")
    ::MarkFirstPassOptimizationsOff( component_name:p1 );
  elif ( "TagStateActionCommentBlocksEnabled" == f )
    ::TagStateActionCommentBlocksEnabled();
  elif ( "MarkStateActionCommentBlocksEnabled" == f )
    // MarkStateActionCommentBlocksEnabled("component_name")
    ::MarkStateActionCommentBlocksEnabled( component_name:p1 );
  elif ( "TagStateActionStatementCommentsDisabled" == f )
    ::TagStateActionStatementCommentsDisabled();
  elif ( "MarkStateActionStatementCommentsDisabled" == f )
    // MarkStateActionStatementCommentsDisabled("component_name")
    ::MarkStateActionStatementCommentsDisabled( component_name:p1 );
  elif ( "TagStateActionVariableNamesEnabled" == f )
    ::TagStateActionVariableNamesEnabled();
  elif ( "TagVerboseReflexivePhrasesEnabled" == f )
    ::TagVerboseReflexivePhrasesEnabled();
  elif ( "MarkPortWiring" == f )
    // MarkPortWiring("home_component","home_port","foreign_component","foreign_port")
    ::MarkPortWiring( home_component:p1, home_port:p2, foreign_component:p3, foreign_port:p4 );
  elif ( "TagDispatchFlavor" == f )
    // TagDispatchFlavor("flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDispatchFlavor( flavor:i1 );
    // event
  elif ( "TagPriorityEvent" == f )
    // TagPriorityEvent("evt_label","priority_value":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagPriorityEvent( evt_label:p1, priority_value:i2 );
  elif ( "MarkPriorityEvent" == f )
    // MarkPriorityEvent("component_name","evt_label","priority_value":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkPriorityEvent( component_name:p1, evt_label:p2, priority_value:i3 );
  else
    // not in this pass
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("df2b8f7b-a972-4564-b00d-8f0f840577cd",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'pass',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b168da7a-57cd-4367-a8c0-aa368bc70839",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'f',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"df2b8f7b-a972-4564-b00d-8f0f840577cd",
	'');
INSERT INTO S_SPARM
	VALUES ("e4c043b9-3081-4781-9994-9a3c5a05898d",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'p1',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b168da7a-57cd-4367-a8c0-aa368bc70839",
	'');
INSERT INTO S_SPARM
	VALUES ("b5a9ff7e-46a3-48ce-ba01-91536a55dbb7",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'p2',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e4c043b9-3081-4781-9994-9a3c5a05898d",
	'');
INSERT INTO S_SPARM
	VALUES ("d847f8af-4d05-4037-8aa3-8cfa3e95ac65",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'p3',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b5a9ff7e-46a3-48ce-ba01-91536a55dbb7",
	'');
INSERT INTO S_SPARM
	VALUES ("e4ee1ce2-bc33-4b72-bbdb-201329d1a1bd",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'p4',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d847f8af-4d05-4037-8aa3-8cfa3e95ac65",
	'');
INSERT INTO S_SPARM
	VALUES ("5543d4eb-a6ae-42c9-9b89-f1305e77001a",
	"37c85f1f-760c-4f77-846a-ffde28165098",
	'p5',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e4ee1ce2-bc33-4b72-bbdb-201329d1a1bd",
	'');
INSERT INTO PE_PE
	VALUES ("37c85f1f-760c-4f77-846a-ffde28165098",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f0e1d4fc-4840-4f6a-8bd2-dc9d35da9bae",
	"00000000-0000-0000-0000-000000000000",
	'T_atoi',
	'',
	'//
s = param.s;
//r = ::STRING_TO_INTEGER( component_name:s );
return 0;
::oal( s:"return strtol( p_s, 0, 10 );" );
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6c03939e-16c5-423a-9e04-49c057f994d5",
	"f0e1d4fc-4840-4f6a-8bd2-dc9d35da9bae",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f0e1d4fc-4840-4f6a-8bd2-dc9d35da9bae",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("27b1810b-e74a-49f0-859b-32fc1c54965f",
	1,
	"f76021f0-a257-44e3-a11e-4104b91c38ec",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("f76021f0-a257-44e3-a11e-4104b91c38ec",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'mcmc',
	'',
	0,
	'../mcmc.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'escher',
	1,
	'../../escher.xtuml');
